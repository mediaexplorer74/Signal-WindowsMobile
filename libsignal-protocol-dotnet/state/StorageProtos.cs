// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LocalStorageProtocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace libsignal.state
{

    /// <summary>Holder for reflection information generated from LocalStorageProtocol.proto</summary>
    public static partial class LocalStorageProtocolReflection
    {

        #region Descriptor
        /// <summary>File descriptor for LocalStorageProtocol.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static LocalStorageProtocolReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChpMb2NhbFN0b3JhZ2VQcm90b2NvbC5wcm90bxIKdGV4dHNlY3VyZSLaDgoQ",
                  "U2Vzc2lvblN0cnVjdHVyZRIYCg5zZXNzaW9uVmVyc2lvbhgBIAEoDUgAEh0K",
                  "E2xvY2FsSWRlbnRpdHlQdWJsaWMYAiABKAxIARIeChRyZW1vdGVJZGVudGl0",
                  "eVB1YmxpYxgDIAEoDEgCEhEKB3Jvb3RLZXkYBCABKAxIAxIZCg9wcmV2aW91",
                  "c0NvdW50ZXIYBSABKA1IBBI5CgtzZW5kZXJDaGFpbhgGIAEoCzIiLnRleHRz",
                  "ZWN1cmUuU2Vzc2lvblN0cnVjdHVyZS5DaGFpbkgFEjoKDnJlY2VpdmVyQ2hh",
                  "aW5zGAcgAygLMiIudGV4dHNlY3VyZS5TZXNzaW9uU3RydWN0dXJlLkNoYWlu",
                  "Ek0KEnBlbmRpbmdLZXlFeGNoYW5nZRgIIAEoCzIvLnRleHRzZWN1cmUuU2Vz",
                  "c2lvblN0cnVjdHVyZS5QZW5kaW5nS2V5RXhjaGFuZ2VIBhJDCg1wZW5kaW5n",
                  "UHJlS2V5GAkgASgLMioudGV4dHNlY3VyZS5TZXNzaW9uU3RydWN0dXJlLlBl",
                  "bmRpbmdQcmVLZXlIBxIeChRyZW1vdGVSZWdpc3RyYXRpb25JZBgKIAEoDUgI",
                  "Eh0KE2xvY2FsUmVnaXN0cmF0aW9uSWQYCyABKA1ICRIWCgxuZWVkc1JlZnJl",
                  "c2gYDCABKAhIChIWCgxhbGljZUJhc2VLZXkYDSABKAxICxrzAwoFQ2hhaW4S",
                  "GgoQc2VuZGVyUmF0Y2hldEtleRgBIAEoDEgAEiEKF3NlbmRlclJhdGNoZXRL",
                  "ZXlQcml2YXRlGAIgASgMSAESPwoIY2hhaW5LZXkYAyABKAsyKy50ZXh0c2Vj",
                  "dXJlLlNlc3Npb25TdHJ1Y3R1cmUuQ2hhaW4uQ2hhaW5LZXlIAhJCCgttZXNz",
                  "YWdlS2V5cxgEIAMoCzItLnRleHRzZWN1cmUuU2Vzc2lvblN0cnVjdHVyZS5D",
                  "aGFpbi5NZXNzYWdlS2V5GkYKCENoYWluS2V5Eg8KBWluZGV4GAEgASgNSAAS",
                  "DQoDa2V5GAIgASgMSAFCDQoLaW5kZXhfb25lb2ZCCwoJa2V5X29uZW9mGpAB",
                  "CgpNZXNzYWdlS2V5Eg8KBWluZGV4GAEgASgNSAASEwoJY2lwaGVyS2V5GAIg",
                  "ASgMSAESEAoGbWFjS2V5GAMgASgMSAISDAoCaXYYBCABKAxIA0INCgtpbmRl",
                  "eF9vbmVvZkIRCg9jaXBoZXJLZXlfb25lb2ZCDgoMbWFjS2V5X29uZW9mQgoK",
                  "CGl2X29uZW9mQhgKFnNlbmRlclJhdGNoZXRLZXlfb25lb2ZCHwodc2VuZGVy",
                  "UmF0Y2hldEtleVByaXZhdGVfb25lb2ZCEAoOY2hhaW5LZXlfb25lb2YalAMK",
                  "ElBlbmRpbmdLZXlFeGNoYW5nZRISCghzZXF1ZW5jZRgBIAEoDUgAEhYKDGxv",
                  "Y2FsQmFzZUtleRgCIAEoDEgBEh0KE2xvY2FsQmFzZUtleVByaXZhdGUYAyAB",
                  "KAxIAhIZCg9sb2NhbFJhdGNoZXRLZXkYBCABKAxIAxIgChZsb2NhbFJhdGNo",
                  "ZXRLZXlQcml2YXRlGAUgASgMSAQSGgoQbG9jYWxJZGVudGl0eUtleRgHIAEo",
                  "DEgFEiEKF2xvY2FsSWRlbnRpdHlLZXlQcml2YXRlGAggASgMSAZCEAoOc2Vx",
                  "dWVuY2Vfb25lb2ZCFAoSbG9jYWxCYXNlS2V5X29uZW9mQhsKGWxvY2FsQmFz",
                  "ZUtleVByaXZhdGVfb25lb2ZCFwoVbG9jYWxSYXRjaGV0S2V5X29uZW9mQh4K",
                  "HGxvY2FsUmF0Y2hldEtleVByaXZhdGVfb25lb2ZCGAoWbG9jYWxJZGVudGl0",
                  "eUtleV9vbmVvZkIfCh1sb2NhbElkZW50aXR5S2V5UHJpdmF0ZV9vbmVvZhqL",
                  "AQoNUGVuZGluZ1ByZUtleRISCghwcmVLZXlJZBgBIAEoDUgAEhgKDnNpZ25l",
                  "ZFByZUtleUlkGAMgASgFSAESEQoHYmFzZUtleRgCIAEoDEgCQhAKDnByZUtl",
                  "eUlkX29uZW9mQhYKFHNpZ25lZFByZUtleUlkX29uZW9mQg8KDWJhc2VLZXlf",
                  "b25lb2ZCFgoUc2Vzc2lvblZlcnNpb25fb25lb2ZCGwoZbG9jYWxJZGVudGl0",
                  "eVB1YmxpY19vbmVvZkIcChpyZW1vdGVJZGVudGl0eVB1YmxpY19vbmVvZkIP",
                  "Cg1yb290S2V5X29uZW9mQhcKFXByZXZpb3VzQ291bnRlcl9vbmVvZkITChFz",
                  "ZW5kZXJDaGFpbl9vbmVvZkIaChhwZW5kaW5nS2V5RXhjaGFuZ2Vfb25lb2ZC",
                  "FQoTcGVuZGluZ1ByZUtleV9vbmVvZkIcChpyZW1vdGVSZWdpc3RyYXRpb25J",
                  "ZF9vbmVvZkIbChlsb2NhbFJlZ2lzdHJhdGlvbklkX29uZW9mQhQKEm5lZWRz",
                  "UmVmcmVzaF9vbmVvZkIUChJhbGljZUJhc2VLZXlfb25lb2YikwEKD1JlY29y",
                  "ZFN0cnVjdHVyZRI2Cg5jdXJyZW50U2Vzc2lvbhgBIAEoCzIcLnRleHRzZWN1",
                  "cmUuU2Vzc2lvblN0cnVjdHVyZUgAEjYKEHByZXZpb3VzU2Vzc2lvbnMYAiAD",
                  "KAsyHC50ZXh0c2VjdXJlLlNlc3Npb25TdHJ1Y3R1cmVCEAoOc2VxdWVuY2Vf",
                  "b25lb2YigwEKFVByZUtleVJlY29yZFN0cnVjdHVyZRIMCgJpZBgBIAEoDUgA",
                  "EhMKCXB1YmxpY0tleRgCIAEoDEgBEhQKCnByaXZhdGVLZXkYAyABKAxIAkIK",
                  "CghpZF9vbmVvZkIRCg9wdWJsaWNLZXlfb25lb2ZCEgoQcHJpdmF0ZUtleV9v",
                  "bmVvZiLZAQobU2lnbmVkUHJlS2V5UmVjb3JkU3RydWN0dXJlEgwKAmlkGAEg",
                  "ASgNSAASEwoJcHVibGljS2V5GAIgASgMSAESFAoKcHJpdmF0ZUtleRgDIAEo",
                  "DEgCEhMKCXNpZ25hdHVyZRgEIAEoDEgDEhMKCXRpbWVzdGFtcBgFIAEoBkgE",
                  "QgoKCGlkX29uZW9mQhEKD3B1YmxpY0tleV9vbmVvZkISChBwcml2YXRlS2V5",
                  "X29uZW9mQhEKD3NpZ25hdHVyZV9vbmVvZkIRCg90aW1lc3RhbXBfb25lb2Yi",
                  "bAoYSWRlbnRpdHlLZXlQYWlyU3RydWN0dXJlEhMKCXB1YmxpY0tleRgBIAEo",
                  "DEgAEhQKCnByaXZhdGVLZXkYAiABKAxIAUIRCg9wdWJsaWNLZXlfb25lb2ZC",
                  "EgoQcHJpdmF0ZUtleV9vbmVvZiL0BAoXU2VuZGVyS2V5U3RhdGVTdHJ1Y3R1",
                  "cmUSFQoLc2VuZGVyS2V5SWQYASABKA1IABJMCg5zZW5kZXJDaGFpbktleRgC",
                  "IAEoCzIyLnRleHRzZWN1cmUuU2VuZGVyS2V5U3RhdGVTdHJ1Y3R1cmUuU2Vu",
                  "ZGVyQ2hhaW5LZXlIARJQChBzZW5kZXJTaWduaW5nS2V5GAMgASgLMjQudGV4",
                  "dHNlY3VyZS5TZW5kZXJLZXlTdGF0ZVN0cnVjdHVyZS5TZW5kZXJTaWduaW5n",
                  "S2V5SAISTwoRc2VuZGVyTWVzc2FnZUtleXMYBCADKAsyNC50ZXh0c2VjdXJl",
                  "LlNlbmRlcktleVN0YXRlU3RydWN0dXJlLlNlbmRlck1lc3NhZ2VLZXkaVgoO",
                  "U2VuZGVyQ2hhaW5LZXkSEwoJaXRlcmF0aW9uGAEgASgNSAASDgoEc2VlZBgC",
                  "IAEoDEgBQhEKD2l0ZXJhdGlvbl9vbmVvZkIMCgpzZWVkX29uZW9mGlgKEFNl",
                  "bmRlck1lc3NhZ2VLZXkSEwoJaXRlcmF0aW9uGAEgASgNSAASDgoEc2VlZBgC",
                  "IAEoDEgBQhEKD2l0ZXJhdGlvbl9vbmVvZkIMCgpzZWVkX29uZW9mGlgKEFNl",
                  "bmRlclNpZ25pbmdLZXkSEAoGcHVibGljGAEgASgMSAASEQoHcHJpdmF0ZRgC",
                  "IAEoDEgBQg4KDHB1YmxpY19vbmVvZkIPCg1wcml2YXRlX29uZW9mQhMKEXNl",
                  "bmRlcktleUlkX29uZW9mQhYKFHNlbmRlckNoYWluS2V5X29uZW9mQhgKFnNl",
                  "bmRlclNpZ25pbmdLZXlfb25lb2YiWAoYU2VuZGVyS2V5UmVjb3JkU3RydWN0",
                  "dXJlEjwKD3NlbmRlcktleVN0YXRlcxgBIAMoCzIjLnRleHRzZWN1cmUuU2Vu",
                  "ZGVyS2V5U3RhdGVTdHJ1Y3R1cmVCEqoCD2xpYnNpZ25hbC5zdGF0ZWIGcHJv",
                  "dG8z"));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SessionStructure), global::libsignal.state.SessionStructure.Parser, new[]{ "SessionVersion", "LocalIdentityPublic", "RemoteIdentityPublic", "RootKey", "PreviousCounter", "SenderChain", "ReceiverChains", "PendingKeyExchange", "PendingPreKey", "RemoteRegistrationId", "LocalRegistrationId", "NeedsRefresh", "AliceBaseKey" }, new[]{ "SessionVersionOneof", "LocalIdentityPublicOneof", "RemoteIdentityPublicOneof", "RootKeyOneof", "PreviousCounterOneof", "SenderChainOneof", "PendingKeyExchangeOneof", "PendingPreKeyOneof", "RemoteRegistrationIdOneof", "LocalRegistrationIdOneof", "NeedsRefreshOneof", "AliceBaseKeyOneof" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SessionStructure.Types.Chain), global::libsignal.state.SessionStructure.Types.Chain.Parser, new[]{ "SenderRatchetKey", "SenderRatchetKeyPrivate", "ChainKey", "MessageKeys" }, new[]{ "SenderRatchetKeyOneof", "SenderRatchetKeyPrivateOneof", "ChainKeyOneof" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SessionStructure.Types.Chain.Types.ChainKey), global::libsignal.state.SessionStructure.Types.Chain.Types.ChainKey.Parser, new[]{ "Index", "Key" }, new[]{ "IndexOneof", "KeyOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SessionStructure.Types.Chain.Types.MessageKey), global::libsignal.state.SessionStructure.Types.Chain.Types.MessageKey.Parser, new[]{ "Index", "CipherKey", "MacKey", "Iv" }, new[]{ "IndexOneof", "CipherKeyOneof", "MacKeyOneof", "IvOneof" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SessionStructure.Types.PendingKeyExchange), global::libsignal.state.SessionStructure.Types.PendingKeyExchange.Parser, new[]{ "Sequence", "LocalBaseKey", "LocalBaseKeyPrivate", "LocalRatchetKey", "LocalRatchetKeyPrivate", "LocalIdentityKey", "LocalIdentityKeyPrivate" }, new[]{ "SequenceOneof", "LocalBaseKeyOneof", "LocalBaseKeyPrivateOneof", "LocalRatchetKeyOneof", "LocalRatchetKeyPrivateOneof", "LocalIdentityKeyOneof", "LocalIdentityKeyPrivateOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SessionStructure.Types.PendingPreKey), global::libsignal.state.SessionStructure.Types.PendingPreKey.Parser, new[]{ "PreKeyId", "SignedPreKeyId", "BaseKey" }, new[]{ "PreKeyIdOneof", "SignedPreKeyIdOneof", "BaseKeyOneof" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.RecordStructure), global::libsignal.state.RecordStructure.Parser, new[]{ "CurrentSession", "PreviousSessions" }, new[]{ "SequenceOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.PreKeyRecordStructure), global::libsignal.state.PreKeyRecordStructure.Parser, new[]{ "Id", "PublicKey", "PrivateKey" }, new[]{ "IdOneof", "PublicKeyOneof", "PrivateKeyOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SignedPreKeyRecordStructure), global::libsignal.state.SignedPreKeyRecordStructure.Parser, new[]{ "Id", "PublicKey", "PrivateKey", "Signature", "Timestamp" }, new[]{ "IdOneof", "PublicKeyOneof", "PrivateKeyOneof", "SignatureOneof", "TimestampOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.IdentityKeyPairStructure), global::libsignal.state.IdentityKeyPairStructure.Parser, new[]{ "PublicKey", "PrivateKey" }, new[]{ "PublicKeyOneof", "PrivateKeyOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SenderKeyStateStructure), global::libsignal.state.SenderKeyStateStructure.Parser, new[]{ "SenderKeyId", "SenderChainKey", "SenderSigningKey", "SenderMessageKeys" }, new[]{ "SenderKeyIdOneof", "SenderChainKeyOneof", "SenderSigningKeyOneof" }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SenderKeyStateStructure.Types.SenderChainKey), global::libsignal.state.SenderKeyStateStructure.Types.SenderChainKey.Parser, new[]{ "Iteration", "Seed" }, new[]{ "IterationOneof", "SeedOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SenderKeyStateStructure.Types.SenderMessageKey), global::libsignal.state.SenderKeyStateStructure.Types.SenderMessageKey.Parser, new[]{ "Iteration", "Seed" }, new[]{ "IterationOneof", "SeedOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SenderKeyStateStructure.Types.SenderSigningKey), global::libsignal.state.SenderKeyStateStructure.Types.SenderSigningKey.Parser, new[]{ "Public", "Private" }, new[]{ "PublicOneof", "PrivateOneof" }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::libsignal.state.SenderKeyRecordStructure), global::libsignal.state.SenderKeyRecordStructure.Parser, new[]{ "SenderKeyStates" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class SessionStructure : pb::IMessage<SessionStructure>
    {
        private static readonly pb::MessageParser<SessionStructure> _parser = new pb::MessageParser<SessionStructure>(() => new SessionStructure());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SessionStructure> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::libsignal.state.LocalStorageProtocolReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SessionStructure()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SessionStructure(SessionStructure other) : this()
        {
            receiverChains_ = other.receiverChains_.Clone();
            switch (other.SessionVersionOneofCase)
            {
                case SessionVersionOneofOneofCase.SessionVersion:
                    SessionVersion = other.SessionVersion;
                    break;
            }

            switch (other.LocalIdentityPublicOneofCase)
            {
                case LocalIdentityPublicOneofOneofCase.LocalIdentityPublic:
                    LocalIdentityPublic = other.LocalIdentityPublic;
                    break;
            }

            switch (other.RemoteIdentityPublicOneofCase)
            {
                case RemoteIdentityPublicOneofOneofCase.RemoteIdentityPublic:
                    RemoteIdentityPublic = other.RemoteIdentityPublic;
                    break;
            }

            switch (other.RootKeyOneofCase)
            {
                case RootKeyOneofOneofCase.RootKey:
                    RootKey = other.RootKey;
                    break;
            }

            switch (other.PreviousCounterOneofCase)
            {
                case PreviousCounterOneofOneofCase.PreviousCounter:
                    PreviousCounter = other.PreviousCounter;
                    break;
            }

            switch (other.SenderChainOneofCase)
            {
                case SenderChainOneofOneofCase.SenderChain:
                    SenderChain = other.SenderChain.Clone();
                    break;
            }

            switch (other.PendingKeyExchangeOneofCase)
            {
                case PendingKeyExchangeOneofOneofCase.PendingKeyExchange:
                    PendingKeyExchange = other.PendingKeyExchange.Clone();
                    break;
            }

            switch (other.PendingPreKeyOneofCase)
            {
                case PendingPreKeyOneofOneofCase.PendingPreKey:
                    PendingPreKey = other.PendingPreKey.Clone();
                    break;
            }

            switch (other.RemoteRegistrationIdOneofCase)
            {
                case RemoteRegistrationIdOneofOneofCase.RemoteRegistrationId:
                    RemoteRegistrationId = other.RemoteRegistrationId;
                    break;
            }

            switch (other.LocalRegistrationIdOneofCase)
            {
                case LocalRegistrationIdOneofOneofCase.LocalRegistrationId:
                    LocalRegistrationId = other.LocalRegistrationId;
                    break;
            }

            switch (other.NeedsRefreshOneofCase)
            {
                case NeedsRefreshOneofOneofCase.NeedsRefresh:
                    NeedsRefresh = other.NeedsRefresh;
                    break;
            }

            switch (other.AliceBaseKeyOneofCase)
            {
                case AliceBaseKeyOneofOneofCase.AliceBaseKey:
                    AliceBaseKey = other.AliceBaseKey;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SessionStructure Clone()
        {
            return new SessionStructure(this);
        }

        /// <summary>Field number for the "sessionVersion" field.</summary>
        public const int SessionVersionFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SessionVersion
        {
            get { return sessionVersionOneofCase_ == SessionVersionOneofOneofCase.SessionVersion ? (uint)sessionVersionOneof_ : 0; }
            set
            {
                sessionVersionOneof_ = value;
                sessionVersionOneofCase_ = SessionVersionOneofOneofCase.SessionVersion;
            }
        }

        /// <summary>Field number for the "localIdentityPublic" field.</summary>
        public const int LocalIdentityPublicFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString LocalIdentityPublic
        {
            get { return localIdentityPublicOneofCase_ == LocalIdentityPublicOneofOneofCase.LocalIdentityPublic ? (pb::ByteString)localIdentityPublicOneof_ : pb::ByteString.Empty; }
            set
            {
                localIdentityPublicOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                localIdentityPublicOneofCase_ = LocalIdentityPublicOneofOneofCase.LocalIdentityPublic;
            }
        }

        /// <summary>Field number for the "remoteIdentityPublic" field.</summary>
        public const int RemoteIdentityPublicFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RemoteIdentityPublic
        {
            get { return remoteIdentityPublicOneofCase_ == RemoteIdentityPublicOneofOneofCase.RemoteIdentityPublic ? (pb::ByteString)remoteIdentityPublicOneof_ : pb::ByteString.Empty; }
            set
            {
                remoteIdentityPublicOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                remoteIdentityPublicOneofCase_ = RemoteIdentityPublicOneofOneofCase.RemoteIdentityPublic;
            }
        }

        /// <summary>Field number for the "rootKey" field.</summary>
        public const int RootKeyFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString RootKey
        {
            get { return rootKeyOneofCase_ == RootKeyOneofOneofCase.RootKey ? (pb::ByteString)rootKeyOneof_ : pb::ByteString.Empty; }
            set
            {
                rootKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                rootKeyOneofCase_ = RootKeyOneofOneofCase.RootKey;
            }
        }

        /// <summary>Field number for the "previousCounter" field.</summary>
        public const int PreviousCounterFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint PreviousCounter
        {
            get { return previousCounterOneofCase_ == PreviousCounterOneofOneofCase.PreviousCounter ? (uint)previousCounterOneof_ : 0; }
            set
            {
                previousCounterOneof_ = value;
                previousCounterOneofCase_ = PreviousCounterOneofOneofCase.PreviousCounter;
            }
        }

        /// <summary>Field number for the "senderChain" field.</summary>
        public const int SenderChainFieldNumber = 6;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignal.state.SessionStructure.Types.Chain SenderChain
        {
            get { return senderChainOneofCase_ == SenderChainOneofOneofCase.SenderChain ? (global::libsignal.state.SessionStructure.Types.Chain)senderChainOneof_ : null; }
            set
            {
                senderChainOneof_ = value;
                senderChainOneofCase_ = value == null ? SenderChainOneofOneofCase.None : SenderChainOneofOneofCase.SenderChain;
            }
        }

        /// <summary>Field number for the "receiverChains" field.</summary>
        public const int ReceiverChainsFieldNumber = 7;
        private static readonly pb::FieldCodec<global::libsignal.state.SessionStructure.Types.Chain> _repeated_receiverChains_codec
            = pb::FieldCodec.ForMessage(58, global::libsignal.state.SessionStructure.Types.Chain.Parser);
        private readonly pbc::RepeatedField<global::libsignal.state.SessionStructure.Types.Chain> receiverChains_ = new pbc::RepeatedField<global::libsignal.state.SessionStructure.Types.Chain>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignal.state.SessionStructure.Types.Chain> ReceiverChains
        {
            get { return receiverChains_; }
        }

        /// <summary>Field number for the "pendingKeyExchange" field.</summary>
        public const int PendingKeyExchangeFieldNumber = 8;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignal.state.SessionStructure.Types.PendingKeyExchange PendingKeyExchange
        {
            get { return pendingKeyExchangeOneofCase_ == PendingKeyExchangeOneofOneofCase.PendingKeyExchange ? (global::libsignal.state.SessionStructure.Types.PendingKeyExchange)pendingKeyExchangeOneof_ : null; }
            set
            {
                pendingKeyExchangeOneof_ = value;
                pendingKeyExchangeOneofCase_ = value == null ? PendingKeyExchangeOneofOneofCase.None : PendingKeyExchangeOneofOneofCase.PendingKeyExchange;
            }
        }

        /// <summary>Field number for the "pendingPreKey" field.</summary>
        public const int PendingPreKeyFieldNumber = 9;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignal.state.SessionStructure.Types.PendingPreKey PendingPreKey
        {
            get { return pendingPreKeyOneofCase_ == PendingPreKeyOneofOneofCase.PendingPreKey ? (global::libsignal.state.SessionStructure.Types.PendingPreKey)pendingPreKeyOneof_ : null; }
            set
            {
                pendingPreKeyOneof_ = value;
                pendingPreKeyOneofCase_ = value == null ? PendingPreKeyOneofOneofCase.None : PendingPreKeyOneofOneofCase.PendingPreKey;
            }
        }

        /// <summary>Field number for the "remoteRegistrationId" field.</summary>
        public const int RemoteRegistrationIdFieldNumber = 10;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RemoteRegistrationId
        {
            get { return remoteRegistrationIdOneofCase_ == RemoteRegistrationIdOneofOneofCase.RemoteRegistrationId ? (uint)remoteRegistrationIdOneof_ : 0; }
            set
            {
                remoteRegistrationIdOneof_ = value;
                remoteRegistrationIdOneofCase_ = RemoteRegistrationIdOneofOneofCase.RemoteRegistrationId;
            }
        }

        /// <summary>Field number for the "localRegistrationId" field.</summary>
        public const int LocalRegistrationIdFieldNumber = 11;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint LocalRegistrationId
        {
            get { return localRegistrationIdOneofCase_ == LocalRegistrationIdOneofOneofCase.LocalRegistrationId ? (uint)localRegistrationIdOneof_ : 0; }
            set
            {
                localRegistrationIdOneof_ = value;
                localRegistrationIdOneofCase_ = LocalRegistrationIdOneofOneofCase.LocalRegistrationId;
            }
        }

        /// <summary>Field number for the "needsRefresh" field.</summary>
        public const int NeedsRefreshFieldNumber = 12;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool NeedsRefresh
        {
            get { return needsRefreshOneofCase_ == NeedsRefreshOneofOneofCase.NeedsRefresh ? (bool)needsRefreshOneof_ : false; }
            set
            {
                needsRefreshOneof_ = value;
                needsRefreshOneofCase_ = NeedsRefreshOneofOneofCase.NeedsRefresh;
            }
        }

        /// <summary>Field number for the "aliceBaseKey" field.</summary>
        public const int AliceBaseKeyFieldNumber = 13;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString AliceBaseKey
        {
            get { return aliceBaseKeyOneofCase_ == AliceBaseKeyOneofOneofCase.AliceBaseKey ? (pb::ByteString)aliceBaseKeyOneof_ : pb::ByteString.Empty; }
            set
            {
                aliceBaseKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                aliceBaseKeyOneofCase_ = AliceBaseKeyOneofOneofCase.AliceBaseKey;
            }
        }

        private object sessionVersionOneof_;
        /// <summary>Enum of possible cases for the "sessionVersion_oneof" oneof.</summary>
        public enum SessionVersionOneofOneofCase
        {
            None = 0,
            SessionVersion = 1,
        }
        private SessionVersionOneofOneofCase sessionVersionOneofCase_ = SessionVersionOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SessionVersionOneofOneofCase SessionVersionOneofCase
        {
            get { return sessionVersionOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSessionVersionOneof()
        {
            sessionVersionOneofCase_ = SessionVersionOneofOneofCase.None;
            sessionVersionOneof_ = null;
        }

        private object localIdentityPublicOneof_;
        /// <summary>Enum of possible cases for the "localIdentityPublic_oneof" oneof.</summary>
        public enum LocalIdentityPublicOneofOneofCase
        {
            None = 0,
            LocalIdentityPublic = 2,
        }
        private LocalIdentityPublicOneofOneofCase localIdentityPublicOneofCase_ = LocalIdentityPublicOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocalIdentityPublicOneofOneofCase LocalIdentityPublicOneofCase
        {
            get { return localIdentityPublicOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLocalIdentityPublicOneof()
        {
            localIdentityPublicOneofCase_ = LocalIdentityPublicOneofOneofCase.None;
            localIdentityPublicOneof_ = null;
        }

        private object remoteIdentityPublicOneof_;
        /// <summary>Enum of possible cases for the "remoteIdentityPublic_oneof" oneof.</summary>
        public enum RemoteIdentityPublicOneofOneofCase
        {
            None = 0,
            RemoteIdentityPublic = 3,
        }
        private RemoteIdentityPublicOneofOneofCase remoteIdentityPublicOneofCase_ = RemoteIdentityPublicOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoteIdentityPublicOneofOneofCase RemoteIdentityPublicOneofCase
        {
            get { return remoteIdentityPublicOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRemoteIdentityPublicOneof()
        {
            remoteIdentityPublicOneofCase_ = RemoteIdentityPublicOneofOneofCase.None;
            remoteIdentityPublicOneof_ = null;
        }

        private object rootKeyOneof_;
        /// <summary>Enum of possible cases for the "rootKey_oneof" oneof.</summary>
        public enum RootKeyOneofOneofCase
        {
            None = 0,
            RootKey = 4,
        }
        private RootKeyOneofOneofCase rootKeyOneofCase_ = RootKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RootKeyOneofOneofCase RootKeyOneofCase
        {
            get { return rootKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRootKeyOneof()
        {
            rootKeyOneofCase_ = RootKeyOneofOneofCase.None;
            rootKeyOneof_ = null;
        }

        private object previousCounterOneof_;
        /// <summary>Enum of possible cases for the "previousCounter_oneof" oneof.</summary>
        public enum PreviousCounterOneofOneofCase
        {
            None = 0,
            PreviousCounter = 5,
        }
        private PreviousCounterOneofOneofCase previousCounterOneofCase_ = PreviousCounterOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PreviousCounterOneofOneofCase PreviousCounterOneofCase
        {
            get { return previousCounterOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPreviousCounterOneof()
        {
            previousCounterOneofCase_ = PreviousCounterOneofOneofCase.None;
            previousCounterOneof_ = null;
        }

        private object senderChainOneof_;
        /// <summary>Enum of possible cases for the "senderChain_oneof" oneof.</summary>
        public enum SenderChainOneofOneofCase
        {
            None = 0,
            SenderChain = 6,
        }
        private SenderChainOneofOneofCase senderChainOneofCase_ = SenderChainOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderChainOneofOneofCase SenderChainOneofCase
        {
            get { return senderChainOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderChainOneof()
        {
            senderChainOneofCase_ = SenderChainOneofOneofCase.None;
            senderChainOneof_ = null;
        }

        private object pendingKeyExchangeOneof_;
        /// <summary>Enum of possible cases for the "pendingKeyExchange_oneof" oneof.</summary>
        public enum PendingKeyExchangeOneofOneofCase
        {
            None = 0,
            PendingKeyExchange = 8,
        }
        private PendingKeyExchangeOneofOneofCase pendingKeyExchangeOneofCase_ = PendingKeyExchangeOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingKeyExchangeOneofOneofCase PendingKeyExchangeOneofCase
        {
            get { return pendingKeyExchangeOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPendingKeyExchangeOneof()
        {
            pendingKeyExchangeOneofCase_ = PendingKeyExchangeOneofOneofCase.None;
            pendingKeyExchangeOneof_ = null;
        }

        private object pendingPreKeyOneof_;
        /// <summary>Enum of possible cases for the "pendingPreKey_oneof" oneof.</summary>
        public enum PendingPreKeyOneofOneofCase
        {
            None = 0,
            PendingPreKey = 9,
        }
        private PendingPreKeyOneofOneofCase pendingPreKeyOneofCase_ = PendingPreKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PendingPreKeyOneofOneofCase PendingPreKeyOneofCase
        {
            get { return pendingPreKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPendingPreKeyOneof()
        {
            pendingPreKeyOneofCase_ = PendingPreKeyOneofOneofCase.None;
            pendingPreKeyOneof_ = null;
        }

        private object remoteRegistrationIdOneof_;
        /// <summary>Enum of possible cases for the "remoteRegistrationId_oneof" oneof.</summary>
        public enum RemoteRegistrationIdOneofOneofCase
        {
            None = 0,
            RemoteRegistrationId = 10,
        }
        private RemoteRegistrationIdOneofOneofCase remoteRegistrationIdOneofCase_ = RemoteRegistrationIdOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RemoteRegistrationIdOneofOneofCase RemoteRegistrationIdOneofCase
        {
            get { return remoteRegistrationIdOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRemoteRegistrationIdOneof()
        {
            remoteRegistrationIdOneofCase_ = RemoteRegistrationIdOneofOneofCase.None;
            remoteRegistrationIdOneof_ = null;
        }

        private object localRegistrationIdOneof_;
        /// <summary>Enum of possible cases for the "localRegistrationId_oneof" oneof.</summary>
        public enum LocalRegistrationIdOneofOneofCase
        {
            None = 0,
            LocalRegistrationId = 11,
        }
        private LocalRegistrationIdOneofOneofCase localRegistrationIdOneofCase_ = LocalRegistrationIdOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocalRegistrationIdOneofOneofCase LocalRegistrationIdOneofCase
        {
            get { return localRegistrationIdOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearLocalRegistrationIdOneof()
        {
            localRegistrationIdOneofCase_ = LocalRegistrationIdOneofOneofCase.None;
            localRegistrationIdOneof_ = null;
        }

        private object needsRefreshOneof_;
        /// <summary>Enum of possible cases for the "needsRefresh_oneof" oneof.</summary>
        public enum NeedsRefreshOneofOneofCase
        {
            None = 0,
            NeedsRefresh = 12,
        }
        private NeedsRefreshOneofOneofCase needsRefreshOneofCase_ = NeedsRefreshOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NeedsRefreshOneofOneofCase NeedsRefreshOneofCase
        {
            get { return needsRefreshOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearNeedsRefreshOneof()
        {
            needsRefreshOneofCase_ = NeedsRefreshOneofOneofCase.None;
            needsRefreshOneof_ = null;
        }

        private object aliceBaseKeyOneof_;
        /// <summary>Enum of possible cases for the "aliceBaseKey_oneof" oneof.</summary>
        public enum AliceBaseKeyOneofOneofCase
        {
            None = 0,
            AliceBaseKey = 13,
        }
        private AliceBaseKeyOneofOneofCase aliceBaseKeyOneofCase_ = AliceBaseKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AliceBaseKeyOneofOneofCase AliceBaseKeyOneofCase
        {
            get { return aliceBaseKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAliceBaseKeyOneof()
        {
            aliceBaseKeyOneofCase_ = AliceBaseKeyOneofOneofCase.None;
            aliceBaseKeyOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SessionStructure);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SessionStructure other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SessionVersion != other.SessionVersion) return false;
            if (LocalIdentityPublic != other.LocalIdentityPublic) return false;
            if (RemoteIdentityPublic != other.RemoteIdentityPublic) return false;
            if (RootKey != other.RootKey) return false;
            if (PreviousCounter != other.PreviousCounter) return false;
            if (!object.Equals(SenderChain, other.SenderChain)) return false;
            if (!receiverChains_.Equals(other.receiverChains_)) return false;
            if (!object.Equals(PendingKeyExchange, other.PendingKeyExchange)) return false;
            if (!object.Equals(PendingPreKey, other.PendingPreKey)) return false;
            if (RemoteRegistrationId != other.RemoteRegistrationId) return false;
            if (LocalRegistrationId != other.LocalRegistrationId) return false;
            if (NeedsRefresh != other.NeedsRefresh) return false;
            if (AliceBaseKey != other.AliceBaseKey) return false;
            if (SessionVersionOneofCase != other.SessionVersionOneofCase) return false;
            if (LocalIdentityPublicOneofCase != other.LocalIdentityPublicOneofCase) return false;
            if (RemoteIdentityPublicOneofCase != other.RemoteIdentityPublicOneofCase) return false;
            if (RootKeyOneofCase != other.RootKeyOneofCase) return false;
            if (PreviousCounterOneofCase != other.PreviousCounterOneofCase) return false;
            if (SenderChainOneofCase != other.SenderChainOneofCase) return false;
            if (PendingKeyExchangeOneofCase != other.PendingKeyExchangeOneofCase) return false;
            if (PendingPreKeyOneofCase != other.PendingPreKeyOneofCase) return false;
            if (RemoteRegistrationIdOneofCase != other.RemoteRegistrationIdOneofCase) return false;
            if (LocalRegistrationIdOneofCase != other.LocalRegistrationIdOneofCase) return false;
            if (NeedsRefreshOneofCase != other.NeedsRefreshOneofCase) return false;
            if (AliceBaseKeyOneofCase != other.AliceBaseKeyOneofCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (sessionVersionOneofCase_ == SessionVersionOneofOneofCase.SessionVersion) hash ^= SessionVersion.GetHashCode();
            if (localIdentityPublicOneofCase_ == LocalIdentityPublicOneofOneofCase.LocalIdentityPublic) hash ^= LocalIdentityPublic.GetHashCode();
            if (remoteIdentityPublicOneofCase_ == RemoteIdentityPublicOneofOneofCase.RemoteIdentityPublic) hash ^= RemoteIdentityPublic.GetHashCode();
            if (rootKeyOneofCase_ == RootKeyOneofOneofCase.RootKey) hash ^= RootKey.GetHashCode();
            if (previousCounterOneofCase_ == PreviousCounterOneofOneofCase.PreviousCounter) hash ^= PreviousCounter.GetHashCode();
            if (senderChainOneofCase_ == SenderChainOneofOneofCase.SenderChain) hash ^= SenderChain.GetHashCode();
            hash ^= receiverChains_.GetHashCode();
            if (pendingKeyExchangeOneofCase_ == PendingKeyExchangeOneofOneofCase.PendingKeyExchange) hash ^= PendingKeyExchange.GetHashCode();
            if (pendingPreKeyOneofCase_ == PendingPreKeyOneofOneofCase.PendingPreKey) hash ^= PendingPreKey.GetHashCode();
            if (remoteRegistrationIdOneofCase_ == RemoteRegistrationIdOneofOneofCase.RemoteRegistrationId) hash ^= RemoteRegistrationId.GetHashCode();
            if (localRegistrationIdOneofCase_ == LocalRegistrationIdOneofOneofCase.LocalRegistrationId) hash ^= LocalRegistrationId.GetHashCode();
            if (needsRefreshOneofCase_ == NeedsRefreshOneofOneofCase.NeedsRefresh) hash ^= NeedsRefresh.GetHashCode();
            if (aliceBaseKeyOneofCase_ == AliceBaseKeyOneofOneofCase.AliceBaseKey) hash ^= AliceBaseKey.GetHashCode();
            hash ^= (int)sessionVersionOneofCase_;
            hash ^= (int)localIdentityPublicOneofCase_;
            hash ^= (int)remoteIdentityPublicOneofCase_;
            hash ^= (int)rootKeyOneofCase_;
            hash ^= (int)previousCounterOneofCase_;
            hash ^= (int)senderChainOneofCase_;
            hash ^= (int)pendingKeyExchangeOneofCase_;
            hash ^= (int)pendingPreKeyOneofCase_;
            hash ^= (int)remoteRegistrationIdOneofCase_;
            hash ^= (int)localRegistrationIdOneofCase_;
            hash ^= (int)needsRefreshOneofCase_;
            hash ^= (int)aliceBaseKeyOneofCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (sessionVersionOneofCase_ == SessionVersionOneofOneofCase.SessionVersion)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SessionVersion);
            }
            if (localIdentityPublicOneofCase_ == LocalIdentityPublicOneofOneofCase.LocalIdentityPublic)
            {
                output.WriteRawTag(18);
                output.WriteBytes(LocalIdentityPublic);
            }
            if (remoteIdentityPublicOneofCase_ == RemoteIdentityPublicOneofOneofCase.RemoteIdentityPublic)
            {
                output.WriteRawTag(26);
                output.WriteBytes(RemoteIdentityPublic);
            }
            if (rootKeyOneofCase_ == RootKeyOneofOneofCase.RootKey)
            {
                output.WriteRawTag(34);
                output.WriteBytes(RootKey);
            }
            if (previousCounterOneofCase_ == PreviousCounterOneofOneofCase.PreviousCounter)
            {
                output.WriteRawTag(40);
                output.WriteUInt32(PreviousCounter);
            }
            if (senderChainOneofCase_ == SenderChainOneofOneofCase.SenderChain)
            {
                output.WriteRawTag(50);
                output.WriteMessage(SenderChain);
            }
            receiverChains_.WriteTo(output, _repeated_receiverChains_codec);
            if (pendingKeyExchangeOneofCase_ == PendingKeyExchangeOneofOneofCase.PendingKeyExchange)
            {
                output.WriteRawTag(66);
                output.WriteMessage(PendingKeyExchange);
            }
            if (pendingPreKeyOneofCase_ == PendingPreKeyOneofOneofCase.PendingPreKey)
            {
                output.WriteRawTag(74);
                output.WriteMessage(PendingPreKey);
            }
            if (remoteRegistrationIdOneofCase_ == RemoteRegistrationIdOneofOneofCase.RemoteRegistrationId)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(RemoteRegistrationId);
            }
            if (localRegistrationIdOneofCase_ == LocalRegistrationIdOneofOneofCase.LocalRegistrationId)
            {
                output.WriteRawTag(88);
                output.WriteUInt32(LocalRegistrationId);
            }
            if (needsRefreshOneofCase_ == NeedsRefreshOneofOneofCase.NeedsRefresh)
            {
                output.WriteRawTag(96);
                output.WriteBool(NeedsRefresh);
            }
            if (aliceBaseKeyOneofCase_ == AliceBaseKeyOneofOneofCase.AliceBaseKey)
            {
                output.WriteRawTag(106);
                output.WriteBytes(AliceBaseKey);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (sessionVersionOneofCase_ == SessionVersionOneofOneofCase.SessionVersion)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SessionVersion);
            }
            if (localIdentityPublicOneofCase_ == LocalIdentityPublicOneofOneofCase.LocalIdentityPublic)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocalIdentityPublic);
            }
            if (remoteIdentityPublicOneofCase_ == RemoteIdentityPublicOneofOneofCase.RemoteIdentityPublic)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(RemoteIdentityPublic);
            }
            if (rootKeyOneofCase_ == RootKeyOneofOneofCase.RootKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(RootKey);
            }
            if (previousCounterOneofCase_ == PreviousCounterOneofOneofCase.PreviousCounter)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreviousCounter);
            }
            if (senderChainOneofCase_ == SenderChainOneofOneofCase.SenderChain)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderChain);
            }
            size += receiverChains_.CalculateSize(_repeated_receiverChains_codec);
            if (pendingKeyExchangeOneofCase_ == PendingKeyExchangeOneofOneofCase.PendingKeyExchange)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PendingKeyExchange);
            }
            if (pendingPreKeyOneofCase_ == PendingPreKeyOneofOneofCase.PendingPreKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(PendingPreKey);
            }
            if (remoteRegistrationIdOneofCase_ == RemoteRegistrationIdOneofOneofCase.RemoteRegistrationId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RemoteRegistrationId);
            }
            if (localRegistrationIdOneofCase_ == LocalRegistrationIdOneofOneofCase.LocalRegistrationId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalRegistrationId);
            }
            if (needsRefreshOneofCase_ == NeedsRefreshOneofOneofCase.NeedsRefresh)
            {
                size += 1 + 1;
            }
            if (aliceBaseKeyOneofCase_ == AliceBaseKeyOneofOneofCase.AliceBaseKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(AliceBaseKey);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SessionStructure other)
        {
            if (other == null)
            {
                return;
            }
            receiverChains_.Add(other.receiverChains_);
            switch (other.SessionVersionOneofCase)
            {
                case SessionVersionOneofOneofCase.SessionVersion:
                    SessionVersion = other.SessionVersion;
                    break;
            }

            switch (other.LocalIdentityPublicOneofCase)
            {
                case LocalIdentityPublicOneofOneofCase.LocalIdentityPublic:
                    LocalIdentityPublic = other.LocalIdentityPublic;
                    break;
            }

            switch (other.RemoteIdentityPublicOneofCase)
            {
                case RemoteIdentityPublicOneofOneofCase.RemoteIdentityPublic:
                    RemoteIdentityPublic = other.RemoteIdentityPublic;
                    break;
            }

            switch (other.RootKeyOneofCase)
            {
                case RootKeyOneofOneofCase.RootKey:
                    RootKey = other.RootKey;
                    break;
            }

            switch (other.PreviousCounterOneofCase)
            {
                case PreviousCounterOneofOneofCase.PreviousCounter:
                    PreviousCounter = other.PreviousCounter;
                    break;
            }

            switch (other.SenderChainOneofCase)
            {
                case SenderChainOneofOneofCase.SenderChain:
                    SenderChain = other.SenderChain;
                    break;
            }

            switch (other.PendingKeyExchangeOneofCase)
            {
                case PendingKeyExchangeOneofOneofCase.PendingKeyExchange:
                    PendingKeyExchange = other.PendingKeyExchange;
                    break;
            }

            switch (other.PendingPreKeyOneofCase)
            {
                case PendingPreKeyOneofOneofCase.PendingPreKey:
                    PendingPreKey = other.PendingPreKey;
                    break;
            }

            switch (other.RemoteRegistrationIdOneofCase)
            {
                case RemoteRegistrationIdOneofOneofCase.RemoteRegistrationId:
                    RemoteRegistrationId = other.RemoteRegistrationId;
                    break;
            }

            switch (other.LocalRegistrationIdOneofCase)
            {
                case LocalRegistrationIdOneofOneofCase.LocalRegistrationId:
                    LocalRegistrationId = other.LocalRegistrationId;
                    break;
            }

            switch (other.NeedsRefreshOneofCase)
            {
                case NeedsRefreshOneofOneofCase.NeedsRefresh:
                    NeedsRefresh = other.NeedsRefresh;
                    break;
            }

            switch (other.AliceBaseKeyOneofCase)
            {
                case AliceBaseKeyOneofOneofCase.AliceBaseKey:
                    AliceBaseKey = other.AliceBaseKey;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            SessionVersion = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            LocalIdentityPublic = input.ReadBytes();
                            break;
                        }
                    case 26:
                        {
                            RemoteIdentityPublic = input.ReadBytes();
                            break;
                        }
                    case 34:
                        {
                            RootKey = input.ReadBytes();
                            break;
                        }
                    case 40:
                        {
                            PreviousCounter = input.ReadUInt32();
                            break;
                        }
                    case 50:
                        {
                            global::libsignal.state.SessionStructure.Types.Chain subBuilder = new global::libsignal.state.SessionStructure.Types.Chain();
                            if (senderChainOneofCase_ == SenderChainOneofOneofCase.SenderChain)
                            {
                                subBuilder.MergeFrom(SenderChain);
                            }
                            input.ReadMessage(subBuilder);
                            SenderChain = subBuilder;
                            break;
                        }
                    case 58:
                        {
                            receiverChains_.AddEntriesFrom(input, _repeated_receiverChains_codec);
                            break;
                        }
                    case 66:
                        {
                            global::libsignal.state.SessionStructure.Types.PendingKeyExchange subBuilder = new global::libsignal.state.SessionStructure.Types.PendingKeyExchange();
                            if (pendingKeyExchangeOneofCase_ == PendingKeyExchangeOneofOneofCase.PendingKeyExchange)
                            {
                                subBuilder.MergeFrom(PendingKeyExchange);
                            }
                            input.ReadMessage(subBuilder);
                            PendingKeyExchange = subBuilder;
                            break;
                        }
                    case 74:
                        {
                            global::libsignal.state.SessionStructure.Types.PendingPreKey subBuilder = new global::libsignal.state.SessionStructure.Types.PendingPreKey();
                            if (pendingPreKeyOneofCase_ == PendingPreKeyOneofOneofCase.PendingPreKey)
                            {
                                subBuilder.MergeFrom(PendingPreKey);
                            }
                            input.ReadMessage(subBuilder);
                            PendingPreKey = subBuilder;
                            break;
                        }
                    case 80:
                        {
                            RemoteRegistrationId = input.ReadUInt32();
                            break;
                        }
                    case 88:
                        {
                            LocalRegistrationId = input.ReadUInt32();
                            break;
                        }
                    case 96:
                        {
                            NeedsRefresh = input.ReadBool();
                            break;
                        }
                    case 106:
                        {
                            AliceBaseKey = input.ReadBytes();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the SessionStructure message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class Chain : pb::IMessage<Chain>
            {
                private static readonly pb::MessageParser<Chain> _parser = new pb::MessageParser<Chain>(() => new Chain());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<Chain> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::libsignal.state.SessionStructure.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Chain()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Chain(Chain other) : this()
                {
                    messageKeys_ = other.messageKeys_.Clone();
                    switch (other.SenderRatchetKeyOneofCase)
                    {
                        case SenderRatchetKeyOneofOneofCase.SenderRatchetKey:
                            SenderRatchetKey = other.SenderRatchetKey;
                            break;
                    }

                    switch (other.SenderRatchetKeyPrivateOneofCase)
                    {
                        case SenderRatchetKeyPrivateOneofOneofCase.SenderRatchetKeyPrivate:
                            SenderRatchetKeyPrivate = other.SenderRatchetKeyPrivate;
                            break;
                    }

                    switch (other.ChainKeyOneofCase)
                    {
                        case ChainKeyOneofOneofCase.ChainKey:
                            ChainKey = other.ChainKey.Clone();
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public Chain Clone()
                {
                    return new Chain(this);
                }

                /// <summary>Field number for the "senderRatchetKey" field.</summary>
                public const int SenderRatchetKeyFieldNumber = 1;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString SenderRatchetKey
                {
                    get { return senderRatchetKeyOneofCase_ == SenderRatchetKeyOneofOneofCase.SenderRatchetKey ? (pb::ByteString)senderRatchetKeyOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        senderRatchetKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        senderRatchetKeyOneofCase_ = SenderRatchetKeyOneofOneofCase.SenderRatchetKey;
                    }
                }

                /// <summary>Field number for the "senderRatchetKeyPrivate" field.</summary>
                public const int SenderRatchetKeyPrivateFieldNumber = 2;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString SenderRatchetKeyPrivate
                {
                    get { return senderRatchetKeyPrivateOneofCase_ == SenderRatchetKeyPrivateOneofOneofCase.SenderRatchetKeyPrivate ? (pb::ByteString)senderRatchetKeyPrivateOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        senderRatchetKeyPrivateOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        senderRatchetKeyPrivateOneofCase_ = SenderRatchetKeyPrivateOneofOneofCase.SenderRatchetKeyPrivate;
                    }
                }

                /// <summary>Field number for the "chainKey" field.</summary>
                public const int ChainKeyFieldNumber = 3;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::libsignal.state.SessionStructure.Types.Chain.Types.ChainKey ChainKey
                {
                    get { return chainKeyOneofCase_ == ChainKeyOneofOneofCase.ChainKey ? (global::libsignal.state.SessionStructure.Types.Chain.Types.ChainKey)chainKeyOneof_ : null; }
                    set
                    {
                        chainKeyOneof_ = value;
                        chainKeyOneofCase_ = value == null ? ChainKeyOneofOneofCase.None : ChainKeyOneofOneofCase.ChainKey;
                    }
                }

                /// <summary>Field number for the "messageKeys" field.</summary>
                public const int MessageKeysFieldNumber = 4;
                private static readonly pb::FieldCodec<global::libsignal.state.SessionStructure.Types.Chain.Types.MessageKey> _repeated_messageKeys_codec
                    = pb::FieldCodec.ForMessage(34, global::libsignal.state.SessionStructure.Types.Chain.Types.MessageKey.Parser);
                private readonly pbc::RepeatedField<global::libsignal.state.SessionStructure.Types.Chain.Types.MessageKey> messageKeys_ = new pbc::RepeatedField<global::libsignal.state.SessionStructure.Types.Chain.Types.MessageKey>();
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pbc::RepeatedField<global::libsignal.state.SessionStructure.Types.Chain.Types.MessageKey> MessageKeys
                {
                    get { return messageKeys_; }
                }

                private object senderRatchetKeyOneof_;
                /// <summary>Enum of possible cases for the "senderRatchetKey_oneof" oneof.</summary>
                public enum SenderRatchetKeyOneofOneofCase
                {
                    None = 0,
                    SenderRatchetKey = 1,
                }
                private SenderRatchetKeyOneofOneofCase senderRatchetKeyOneofCase_ = SenderRatchetKeyOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderRatchetKeyOneofOneofCase SenderRatchetKeyOneofCase
                {
                    get { return senderRatchetKeyOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearSenderRatchetKeyOneof()
                {
                    senderRatchetKeyOneofCase_ = SenderRatchetKeyOneofOneofCase.None;
                    senderRatchetKeyOneof_ = null;
                }

                private object senderRatchetKeyPrivateOneof_;
                /// <summary>Enum of possible cases for the "senderRatchetKeyPrivate_oneof" oneof.</summary>
                public enum SenderRatchetKeyPrivateOneofOneofCase
                {
                    None = 0,
                    SenderRatchetKeyPrivate = 2,
                }
                private SenderRatchetKeyPrivateOneofOneofCase senderRatchetKeyPrivateOneofCase_ = SenderRatchetKeyPrivateOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderRatchetKeyPrivateOneofOneofCase SenderRatchetKeyPrivateOneofCase
                {
                    get { return senderRatchetKeyPrivateOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearSenderRatchetKeyPrivateOneof()
                {
                    senderRatchetKeyPrivateOneofCase_ = SenderRatchetKeyPrivateOneofOneofCase.None;
                    senderRatchetKeyPrivateOneof_ = null;
                }

                private object chainKeyOneof_;
                /// <summary>Enum of possible cases for the "chainKey_oneof" oneof.</summary>
                public enum ChainKeyOneofOneofCase
                {
                    None = 0,
                    ChainKey = 3,
                }
                private ChainKeyOneofOneofCase chainKeyOneofCase_ = ChainKeyOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ChainKeyOneofOneofCase ChainKeyOneofCase
                {
                    get { return chainKeyOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearChainKeyOneof()
                {
                    chainKeyOneofCase_ = ChainKeyOneofOneofCase.None;
                    chainKeyOneof_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as Chain);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(Chain other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (SenderRatchetKey != other.SenderRatchetKey) return false;
                    if (SenderRatchetKeyPrivate != other.SenderRatchetKeyPrivate) return false;
                    if (!object.Equals(ChainKey, other.ChainKey)) return false;
                    if (!messageKeys_.Equals(other.messageKeys_)) return false;
                    if (SenderRatchetKeyOneofCase != other.SenderRatchetKeyOneofCase) return false;
                    if (SenderRatchetKeyPrivateOneofCase != other.SenderRatchetKeyPrivateOneofCase) return false;
                    if (ChainKeyOneofCase != other.ChainKeyOneofCase) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (senderRatchetKeyOneofCase_ == SenderRatchetKeyOneofOneofCase.SenderRatchetKey) hash ^= SenderRatchetKey.GetHashCode();
                    if (senderRatchetKeyPrivateOneofCase_ == SenderRatchetKeyPrivateOneofOneofCase.SenderRatchetKeyPrivate) hash ^= SenderRatchetKeyPrivate.GetHashCode();
                    if (chainKeyOneofCase_ == ChainKeyOneofOneofCase.ChainKey) hash ^= ChainKey.GetHashCode();
                    hash ^= messageKeys_.GetHashCode();
                    hash ^= (int)senderRatchetKeyOneofCase_;
                    hash ^= (int)senderRatchetKeyPrivateOneofCase_;
                    hash ^= (int)chainKeyOneofCase_;
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (senderRatchetKeyOneofCase_ == SenderRatchetKeyOneofOneofCase.SenderRatchetKey)
                    {
                        output.WriteRawTag(10);
                        output.WriteBytes(SenderRatchetKey);
                    }
                    if (senderRatchetKeyPrivateOneofCase_ == SenderRatchetKeyPrivateOneofOneofCase.SenderRatchetKeyPrivate)
                    {
                        output.WriteRawTag(18);
                        output.WriteBytes(SenderRatchetKeyPrivate);
                    }
                    if (chainKeyOneofCase_ == ChainKeyOneofOneofCase.ChainKey)
                    {
                        output.WriteRawTag(26);
                        output.WriteMessage(ChainKey);
                    }
                    messageKeys_.WriteTo(output, _repeated_messageKeys_codec);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (senderRatchetKeyOneofCase_ == SenderRatchetKeyOneofOneofCase.SenderRatchetKey)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderRatchetKey);
                    }
                    if (senderRatchetKeyPrivateOneofCase_ == SenderRatchetKeyPrivateOneofOneofCase.SenderRatchetKeyPrivate)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderRatchetKeyPrivate);
                    }
                    if (chainKeyOneofCase_ == ChainKeyOneofOneofCase.ChainKey)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChainKey);
                    }
                    size += messageKeys_.CalculateSize(_repeated_messageKeys_codec);
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(Chain other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    messageKeys_.Add(other.messageKeys_);
                    switch (other.SenderRatchetKeyOneofCase)
                    {
                        case SenderRatchetKeyOneofOneofCase.SenderRatchetKey:
                            SenderRatchetKey = other.SenderRatchetKey;
                            break;
                    }

                    switch (other.SenderRatchetKeyPrivateOneofCase)
                    {
                        case SenderRatchetKeyPrivateOneofOneofCase.SenderRatchetKeyPrivate:
                            SenderRatchetKeyPrivate = other.SenderRatchetKeyPrivate;
                            break;
                    }

                    switch (other.ChainKeyOneofCase)
                    {
                        case ChainKeyOneofOneofCase.ChainKey:
                            ChainKey = other.ChainKey;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    SenderRatchetKey = input.ReadBytes();
                                    break;
                                }
                            case 18:
                                {
                                    SenderRatchetKeyPrivate = input.ReadBytes();
                                    break;
                                }
                            case 26:
                                {
                                    global::libsignal.state.SessionStructure.Types.Chain.Types.ChainKey subBuilder = new global::libsignal.state.SessionStructure.Types.Chain.Types.ChainKey();
                                    if (chainKeyOneofCase_ == ChainKeyOneofOneofCase.ChainKey)
                                    {
                                        subBuilder.MergeFrom(ChainKey);
                                    }
                                    input.ReadMessage(subBuilder);
                                    ChainKey = subBuilder;
                                    break;
                                }
                            case 34:
                                {
                                    messageKeys_.AddEntriesFrom(input, _repeated_messageKeys_codec);
                                    break;
                                }
                        }
                    }
                }

                #region Nested types
                /// <summary>Container for nested types declared in the Chain message type.</summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static partial class Types
                {
                    public sealed partial class ChainKey : pb::IMessage<ChainKey>
                    {
                        private static readonly pb::MessageParser<ChainKey> _parser = new pb::MessageParser<ChainKey>(() => new ChainKey());
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<ChainKey> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::libsignal.state.SessionStructure.Types.Chain.Descriptor.NestedTypes[0]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public ChainKey()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public ChainKey(ChainKey other) : this()
                        {
                            switch (other.IndexOneofCase)
                            {
                                case IndexOneofOneofCase.Index:
                                    Index = other.Index;
                                    break;
                            }

                            switch (other.KeyOneofCase)
                            {
                                case KeyOneofOneofCase.Key:
                                    Key = other.Key;
                                    break;
                            }

                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public ChainKey Clone()
                        {
                            return new ChainKey(this);
                        }

                        /// <summary>Field number for the "index" field.</summary>
                        public const int IndexFieldNumber = 1;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public uint Index
                        {
                            get { return indexOneofCase_ == IndexOneofOneofCase.Index ? (uint)indexOneof_ : 0; }
                            set
                            {
                                indexOneof_ = value;
                                indexOneofCase_ = IndexOneofOneofCase.Index;
                            }
                        }

                        /// <summary>Field number for the "key" field.</summary>
                        public const int KeyFieldNumber = 2;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public pb::ByteString Key
                        {
                            get { return keyOneofCase_ == KeyOneofOneofCase.Key ? (pb::ByteString)keyOneof_ : pb::ByteString.Empty; }
                            set
                            {
                                keyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                                keyOneofCase_ = KeyOneofOneofCase.Key;
                            }
                        }

                        private object indexOneof_;
                        /// <summary>Enum of possible cases for the "index_oneof" oneof.</summary>
                        public enum IndexOneofOneofCase
                        {
                            None = 0,
                            Index = 1,
                        }
                        private IndexOneofOneofCase indexOneofCase_ = IndexOneofOneofCase.None;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public IndexOneofOneofCase IndexOneofCase
                        {
                            get { return indexOneofCase_; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearIndexOneof()
                        {
                            indexOneofCase_ = IndexOneofOneofCase.None;
                            indexOneof_ = null;
                        }

                        private object keyOneof_;
                        /// <summary>Enum of possible cases for the "key_oneof" oneof.</summary>
                        public enum KeyOneofOneofCase
                        {
                            None = 0,
                            Key = 2,
                        }
                        private KeyOneofOneofCase keyOneofCase_ = KeyOneofOneofCase.None;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public KeyOneofOneofCase KeyOneofCase
                        {
                            get { return keyOneofCase_; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearKeyOneof()
                        {
                            keyOneofCase_ = KeyOneofOneofCase.None;
                            keyOneof_ = null;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as ChainKey);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(ChainKey other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Index != other.Index) return false;
                            if (Key != other.Key) return false;
                            if (IndexOneofCase != other.IndexOneofCase) return false;
                            if (KeyOneofCase != other.KeyOneofCase) return false;
                            return true;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (indexOneofCase_ == IndexOneofOneofCase.Index) hash ^= Index.GetHashCode();
                            if (keyOneofCase_ == KeyOneofOneofCase.Key) hash ^= Key.GetHashCode();
                            hash ^= (int)indexOneofCase_;
                            hash ^= (int)keyOneofCase_;
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (indexOneofCase_ == IndexOneofOneofCase.Index)
                            {
                                output.WriteRawTag(8);
                                output.WriteUInt32(Index);
                            }
                            if (keyOneofCase_ == KeyOneofOneofCase.Key)
                            {
                                output.WriteRawTag(18);
                                output.WriteBytes(Key);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (indexOneofCase_ == IndexOneofOneofCase.Index)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
                            }
                            if (keyOneofCase_ == KeyOneofOneofCase.Key)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(ChainKey other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            switch (other.IndexOneofCase)
                            {
                                case IndexOneofOneofCase.Index:
                                    Index = other.Index;
                                    break;
                            }

                            switch (other.KeyOneofCase)
                            {
                                case KeyOneofOneofCase.Key:
                                    Key = other.Key;
                                    break;
                            }

                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        input.SkipLastField();
                                        break;
                                    case 8:
                                        {
                                            Index = input.ReadUInt32();
                                            break;
                                        }
                                    case 18:
                                        {
                                            Key = input.ReadBytes();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                    public sealed partial class MessageKey : pb::IMessage<MessageKey>
                    {
                        private static readonly pb::MessageParser<MessageKey> _parser = new pb::MessageParser<MessageKey>(() => new MessageKey());
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pb::MessageParser<MessageKey> Parser { get { return _parser; } }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public static pbr::MessageDescriptor Descriptor
                        {
                            get { return global::libsignal.state.SessionStructure.Types.Chain.Descriptor.NestedTypes[1]; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        pbr::MessageDescriptor pb::IMessage.Descriptor
                        {
                            get { return Descriptor; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public MessageKey()
                        {
                            OnConstruction();
                        }

                        partial void OnConstruction();

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public MessageKey(MessageKey other) : this()
                        {
                            switch (other.IndexOneofCase)
                            {
                                case IndexOneofOneofCase.Index:
                                    Index = other.Index;
                                    break;
                            }

                            switch (other.CipherKeyOneofCase)
                            {
                                case CipherKeyOneofOneofCase.CipherKey:
                                    CipherKey = other.CipherKey;
                                    break;
                            }

                            switch (other.MacKeyOneofCase)
                            {
                                case MacKeyOneofOneofCase.MacKey:
                                    MacKey = other.MacKey;
                                    break;
                            }

                            switch (other.IvOneofCase)
                            {
                                case IvOneofOneofCase.Iv:
                                    Iv = other.Iv;
                                    break;
                            }

                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public MessageKey Clone()
                        {
                            return new MessageKey(this);
                        }

                        /// <summary>Field number for the "index" field.</summary>
                        public const int IndexFieldNumber = 1;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public uint Index
                        {
                            get { return indexOneofCase_ == IndexOneofOneofCase.Index ? (uint)indexOneof_ : 0; }
                            set
                            {
                                indexOneof_ = value;
                                indexOneofCase_ = IndexOneofOneofCase.Index;
                            }
                        }

                        /// <summary>Field number for the "cipherKey" field.</summary>
                        public const int CipherKeyFieldNumber = 2;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public pb::ByteString CipherKey
                        {
                            get { return cipherKeyOneofCase_ == CipherKeyOneofOneofCase.CipherKey ? (pb::ByteString)cipherKeyOneof_ : pb::ByteString.Empty; }
                            set
                            {
                                cipherKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                                cipherKeyOneofCase_ = CipherKeyOneofOneofCase.CipherKey;
                            }
                        }

                        /// <summary>Field number for the "macKey" field.</summary>
                        public const int MacKeyFieldNumber = 3;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public pb::ByteString MacKey
                        {
                            get { return macKeyOneofCase_ == MacKeyOneofOneofCase.MacKey ? (pb::ByteString)macKeyOneof_ : pb::ByteString.Empty; }
                            set
                            {
                                macKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                                macKeyOneofCase_ = MacKeyOneofOneofCase.MacKey;
                            }
                        }

                        /// <summary>Field number for the "iv" field.</summary>
                        public const int IvFieldNumber = 4;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public pb::ByteString Iv
                        {
                            get { return ivOneofCase_ == IvOneofOneofCase.Iv ? (pb::ByteString)ivOneof_ : pb::ByteString.Empty; }
                            set
                            {
                                ivOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                                ivOneofCase_ = IvOneofOneofCase.Iv;
                            }
                        }

                        private object indexOneof_;
                        /// <summary>Enum of possible cases for the "index_oneof" oneof.</summary>
                        public enum IndexOneofOneofCase
                        {
                            None = 0,
                            Index = 1,
                        }
                        private IndexOneofOneofCase indexOneofCase_ = IndexOneofOneofCase.None;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public IndexOneofOneofCase IndexOneofCase
                        {
                            get { return indexOneofCase_; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearIndexOneof()
                        {
                            indexOneofCase_ = IndexOneofOneofCase.None;
                            indexOneof_ = null;
                        }

                        private object cipherKeyOneof_;
                        /// <summary>Enum of possible cases for the "cipherKey_oneof" oneof.</summary>
                        public enum CipherKeyOneofOneofCase
                        {
                            None = 0,
                            CipherKey = 2,
                        }
                        private CipherKeyOneofOneofCase cipherKeyOneofCase_ = CipherKeyOneofOneofCase.None;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public CipherKeyOneofOneofCase CipherKeyOneofCase
                        {
                            get { return cipherKeyOneofCase_; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearCipherKeyOneof()
                        {
                            cipherKeyOneofCase_ = CipherKeyOneofOneofCase.None;
                            cipherKeyOneof_ = null;
                        }

                        private object macKeyOneof_;
                        /// <summary>Enum of possible cases for the "macKey_oneof" oneof.</summary>
                        public enum MacKeyOneofOneofCase
                        {
                            None = 0,
                            MacKey = 3,
                        }
                        private MacKeyOneofOneofCase macKeyOneofCase_ = MacKeyOneofOneofCase.None;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public MacKeyOneofOneofCase MacKeyOneofCase
                        {
                            get { return macKeyOneofCase_; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearMacKeyOneof()
                        {
                            macKeyOneofCase_ = MacKeyOneofOneofCase.None;
                            macKeyOneof_ = null;
                        }

                        private object ivOneof_;
                        /// <summary>Enum of possible cases for the "iv_oneof" oneof.</summary>
                        public enum IvOneofOneofCase
                        {
                            None = 0,
                            Iv = 4,
                        }
                        private IvOneofOneofCase ivOneofCase_ = IvOneofOneofCase.None;
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public IvOneofOneofCase IvOneofCase
                        {
                            get { return ivOneofCase_; }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void ClearIvOneof()
                        {
                            ivOneofCase_ = IvOneofOneofCase.None;
                            ivOneof_ = null;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override bool Equals(object other)
                        {
                            return Equals(other as MessageKey);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public bool Equals(MessageKey other)
                        {
                            if (ReferenceEquals(other, null))
                            {
                                return false;
                            }
                            if (ReferenceEquals(other, this))
                            {
                                return true;
                            }
                            if (Index != other.Index) return false;
                            if (CipherKey != other.CipherKey) return false;
                            if (MacKey != other.MacKey) return false;
                            if (Iv != other.Iv) return false;
                            if (IndexOneofCase != other.IndexOneofCase) return false;
                            if (CipherKeyOneofCase != other.CipherKeyOneofCase) return false;
                            if (MacKeyOneofCase != other.MacKeyOneofCase) return false;
                            if (IvOneofCase != other.IvOneofCase) return false;
                            return true;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override int GetHashCode()
                        {
                            int hash = 1;
                            if (indexOneofCase_ == IndexOneofOneofCase.Index) hash ^= Index.GetHashCode();
                            if (cipherKeyOneofCase_ == CipherKeyOneofOneofCase.CipherKey) hash ^= CipherKey.GetHashCode();
                            if (macKeyOneofCase_ == MacKeyOneofOneofCase.MacKey) hash ^= MacKey.GetHashCode();
                            if (ivOneofCase_ == IvOneofOneofCase.Iv) hash ^= Iv.GetHashCode();
                            hash ^= (int)indexOneofCase_;
                            hash ^= (int)cipherKeyOneofCase_;
                            hash ^= (int)macKeyOneofCase_;
                            hash ^= (int)ivOneofCase_;
                            return hash;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public override string ToString()
                        {
                            return pb::JsonFormatter.ToDiagnosticString(this);
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void WriteTo(pb::CodedOutputStream output)
                        {
                            if (indexOneofCase_ == IndexOneofOneofCase.Index)
                            {
                                output.WriteRawTag(8);
                                output.WriteUInt32(Index);
                            }
                            if (cipherKeyOneofCase_ == CipherKeyOneofOneofCase.CipherKey)
                            {
                                output.WriteRawTag(18);
                                output.WriteBytes(CipherKey);
                            }
                            if (macKeyOneofCase_ == MacKeyOneofOneofCase.MacKey)
                            {
                                output.WriteRawTag(26);
                                output.WriteBytes(MacKey);
                            }
                            if (ivOneofCase_ == IvOneofOneofCase.Iv)
                            {
                                output.WriteRawTag(34);
                                output.WriteBytes(Iv);
                            }
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public int CalculateSize()
                        {
                            int size = 0;
                            if (indexOneofCase_ == IndexOneofOneofCase.Index)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
                            }
                            if (cipherKeyOneofCase_ == CipherKeyOneofOneofCase.CipherKey)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeBytesSize(CipherKey);
                            }
                            if (macKeyOneofCase_ == MacKeyOneofOneofCase.MacKey)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeBytesSize(MacKey);
                            }
                            if (ivOneofCase_ == IvOneofOneofCase.Iv)
                            {
                                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Iv);
                            }
                            return size;
                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(MessageKey other)
                        {
                            if (other == null)
                            {
                                return;
                            }
                            switch (other.IndexOneofCase)
                            {
                                case IndexOneofOneofCase.Index:
                                    Index = other.Index;
                                    break;
                            }

                            switch (other.CipherKeyOneofCase)
                            {
                                case CipherKeyOneofOneofCase.CipherKey:
                                    CipherKey = other.CipherKey;
                                    break;
                            }

                            switch (other.MacKeyOneofCase)
                            {
                                case MacKeyOneofOneofCase.MacKey:
                                    MacKey = other.MacKey;
                                    break;
                            }

                            switch (other.IvOneofCase)
                            {
                                case IvOneofOneofCase.Iv:
                                    Iv = other.Iv;
                                    break;
                            }

                        }

                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                        public void MergeFrom(pb::CodedInputStream input)
                        {
                            uint tag;
                            while ((tag = input.ReadTag()) != 0)
                            {
                                switch (tag)
                                {
                                    default:
                                        input.SkipLastField();
                                        break;
                                    case 8:
                                        {
                                            Index = input.ReadUInt32();
                                            break;
                                        }
                                    case 18:
                                        {
                                            CipherKey = input.ReadBytes();
                                            break;
                                        }
                                    case 26:
                                        {
                                            MacKey = input.ReadBytes();
                                            break;
                                        }
                                    case 34:
                                        {
                                            Iv = input.ReadBytes();
                                            break;
                                        }
                                }
                            }
                        }

                    }

                }
                #endregion

            }

            public sealed partial class PendingKeyExchange : pb::IMessage<PendingKeyExchange>
            {
                private static readonly pb::MessageParser<PendingKeyExchange> _parser = new pb::MessageParser<PendingKeyExchange>(() => new PendingKeyExchange());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<PendingKeyExchange> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::libsignal.state.SessionStructure.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PendingKeyExchange()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PendingKeyExchange(PendingKeyExchange other) : this()
                {
                    switch (other.SequenceOneofCase)
                    {
                        case SequenceOneofOneofCase.Sequence:
                            Sequence = other.Sequence;
                            break;
                    }

                    switch (other.LocalBaseKeyOneofCase)
                    {
                        case LocalBaseKeyOneofOneofCase.LocalBaseKey:
                            LocalBaseKey = other.LocalBaseKey;
                            break;
                    }

                    switch (other.LocalBaseKeyPrivateOneofCase)
                    {
                        case LocalBaseKeyPrivateOneofOneofCase.LocalBaseKeyPrivate:
                            LocalBaseKeyPrivate = other.LocalBaseKeyPrivate;
                            break;
                    }

                    switch (other.LocalRatchetKeyOneofCase)
                    {
                        case LocalRatchetKeyOneofOneofCase.LocalRatchetKey:
                            LocalRatchetKey = other.LocalRatchetKey;
                            break;
                    }

                    switch (other.LocalRatchetKeyPrivateOneofCase)
                    {
                        case LocalRatchetKeyPrivateOneofOneofCase.LocalRatchetKeyPrivate:
                            LocalRatchetKeyPrivate = other.LocalRatchetKeyPrivate;
                            break;
                    }

                    switch (other.LocalIdentityKeyOneofCase)
                    {
                        case LocalIdentityKeyOneofOneofCase.LocalIdentityKey:
                            LocalIdentityKey = other.LocalIdentityKey;
                            break;
                    }

                    switch (other.LocalIdentityKeyPrivateOneofCase)
                    {
                        case LocalIdentityKeyPrivateOneofOneofCase.LocalIdentityKeyPrivate:
                            LocalIdentityKeyPrivate = other.LocalIdentityKeyPrivate;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PendingKeyExchange Clone()
                {
                    return new PendingKeyExchange(this);
                }

                /// <summary>Field number for the "sequence" field.</summary>
                public const int SequenceFieldNumber = 1;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint Sequence
                {
                    get { return sequenceOneofCase_ == SequenceOneofOneofCase.Sequence ? (uint)sequenceOneof_ : 0; }
                    set
                    {
                        sequenceOneof_ = value;
                        sequenceOneofCase_ = SequenceOneofOneofCase.Sequence;
                    }
                }

                /// <summary>Field number for the "localBaseKey" field.</summary>
                public const int LocalBaseKeyFieldNumber = 2;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString LocalBaseKey
                {
                    get { return localBaseKeyOneofCase_ == LocalBaseKeyOneofOneofCase.LocalBaseKey ? (pb::ByteString)localBaseKeyOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        localBaseKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        localBaseKeyOneofCase_ = LocalBaseKeyOneofOneofCase.LocalBaseKey;
                    }
                }

                /// <summary>Field number for the "localBaseKeyPrivate" field.</summary>
                public const int LocalBaseKeyPrivateFieldNumber = 3;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString LocalBaseKeyPrivate
                {
                    get { return localBaseKeyPrivateOneofCase_ == LocalBaseKeyPrivateOneofOneofCase.LocalBaseKeyPrivate ? (pb::ByteString)localBaseKeyPrivateOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        localBaseKeyPrivateOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        localBaseKeyPrivateOneofCase_ = LocalBaseKeyPrivateOneofOneofCase.LocalBaseKeyPrivate;
                    }
                }

                /// <summary>Field number for the "localRatchetKey" field.</summary>
                public const int LocalRatchetKeyFieldNumber = 4;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString LocalRatchetKey
                {
                    get { return localRatchetKeyOneofCase_ == LocalRatchetKeyOneofOneofCase.LocalRatchetKey ? (pb::ByteString)localRatchetKeyOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        localRatchetKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        localRatchetKeyOneofCase_ = LocalRatchetKeyOneofOneofCase.LocalRatchetKey;
                    }
                }

                /// <summary>Field number for the "localRatchetKeyPrivate" field.</summary>
                public const int LocalRatchetKeyPrivateFieldNumber = 5;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString LocalRatchetKeyPrivate
                {
                    get { return localRatchetKeyPrivateOneofCase_ == LocalRatchetKeyPrivateOneofOneofCase.LocalRatchetKeyPrivate ? (pb::ByteString)localRatchetKeyPrivateOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        localRatchetKeyPrivateOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        localRatchetKeyPrivateOneofCase_ = LocalRatchetKeyPrivateOneofOneofCase.LocalRatchetKeyPrivate;
                    }
                }

                /// <summary>Field number for the "localIdentityKey" field.</summary>
                public const int LocalIdentityKeyFieldNumber = 7;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString LocalIdentityKey
                {
                    get { return localIdentityKeyOneofCase_ == LocalIdentityKeyOneofOneofCase.LocalIdentityKey ? (pb::ByteString)localIdentityKeyOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        localIdentityKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        localIdentityKeyOneofCase_ = LocalIdentityKeyOneofOneofCase.LocalIdentityKey;
                    }
                }

                /// <summary>Field number for the "localIdentityKeyPrivate" field.</summary>
                public const int LocalIdentityKeyPrivateFieldNumber = 8;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString LocalIdentityKeyPrivate
                {
                    get { return localIdentityKeyPrivateOneofCase_ == LocalIdentityKeyPrivateOneofOneofCase.LocalIdentityKeyPrivate ? (pb::ByteString)localIdentityKeyPrivateOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        localIdentityKeyPrivateOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        localIdentityKeyPrivateOneofCase_ = LocalIdentityKeyPrivateOneofOneofCase.LocalIdentityKeyPrivate;
                    }
                }

                private object sequenceOneof_;
                /// <summary>Enum of possible cases for the "sequence_oneof" oneof.</summary>
                public enum SequenceOneofOneofCase
                {
                    None = 0,
                    Sequence = 1,
                }
                private SequenceOneofOneofCase sequenceOneofCase_ = SequenceOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SequenceOneofOneofCase SequenceOneofCase
                {
                    get { return sequenceOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearSequenceOneof()
                {
                    sequenceOneofCase_ = SequenceOneofOneofCase.None;
                    sequenceOneof_ = null;
                }

                private object localBaseKeyOneof_;
                /// <summary>Enum of possible cases for the "localBaseKey_oneof" oneof.</summary>
                public enum LocalBaseKeyOneofOneofCase
                {
                    None = 0,
                    LocalBaseKey = 2,
                }
                private LocalBaseKeyOneofOneofCase localBaseKeyOneofCase_ = LocalBaseKeyOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public LocalBaseKeyOneofOneofCase LocalBaseKeyOneofCase
                {
                    get { return localBaseKeyOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearLocalBaseKeyOneof()
                {
                    localBaseKeyOneofCase_ = LocalBaseKeyOneofOneofCase.None;
                    localBaseKeyOneof_ = null;
                }

                private object localBaseKeyPrivateOneof_;
                /// <summary>Enum of possible cases for the "localBaseKeyPrivate_oneof" oneof.</summary>
                public enum LocalBaseKeyPrivateOneofOneofCase
                {
                    None = 0,
                    LocalBaseKeyPrivate = 3,
                }
                private LocalBaseKeyPrivateOneofOneofCase localBaseKeyPrivateOneofCase_ = LocalBaseKeyPrivateOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public LocalBaseKeyPrivateOneofOneofCase LocalBaseKeyPrivateOneofCase
                {
                    get { return localBaseKeyPrivateOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearLocalBaseKeyPrivateOneof()
                {
                    localBaseKeyPrivateOneofCase_ = LocalBaseKeyPrivateOneofOneofCase.None;
                    localBaseKeyPrivateOneof_ = null;
                }

                private object localRatchetKeyOneof_;
                /// <summary>Enum of possible cases for the "localRatchetKey_oneof" oneof.</summary>
                public enum LocalRatchetKeyOneofOneofCase
                {
                    None = 0,
                    LocalRatchetKey = 4,
                }
                private LocalRatchetKeyOneofOneofCase localRatchetKeyOneofCase_ = LocalRatchetKeyOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public LocalRatchetKeyOneofOneofCase LocalRatchetKeyOneofCase
                {
                    get { return localRatchetKeyOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearLocalRatchetKeyOneof()
                {
                    localRatchetKeyOneofCase_ = LocalRatchetKeyOneofOneofCase.None;
                    localRatchetKeyOneof_ = null;
                }

                private object localRatchetKeyPrivateOneof_;
                /// <summary>Enum of possible cases for the "localRatchetKeyPrivate_oneof" oneof.</summary>
                public enum LocalRatchetKeyPrivateOneofOneofCase
                {
                    None = 0,
                    LocalRatchetKeyPrivate = 5,
                }
                private LocalRatchetKeyPrivateOneofOneofCase localRatchetKeyPrivateOneofCase_ = LocalRatchetKeyPrivateOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public LocalRatchetKeyPrivateOneofOneofCase LocalRatchetKeyPrivateOneofCase
                {
                    get { return localRatchetKeyPrivateOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearLocalRatchetKeyPrivateOneof()
                {
                    localRatchetKeyPrivateOneofCase_ = LocalRatchetKeyPrivateOneofOneofCase.None;
                    localRatchetKeyPrivateOneof_ = null;
                }

                private object localIdentityKeyOneof_;
                /// <summary>Enum of possible cases for the "localIdentityKey_oneof" oneof.</summary>
                public enum LocalIdentityKeyOneofOneofCase
                {
                    None = 0,
                    LocalIdentityKey = 7,
                }
                private LocalIdentityKeyOneofOneofCase localIdentityKeyOneofCase_ = LocalIdentityKeyOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public LocalIdentityKeyOneofOneofCase LocalIdentityKeyOneofCase
                {
                    get { return localIdentityKeyOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearLocalIdentityKeyOneof()
                {
                    localIdentityKeyOneofCase_ = LocalIdentityKeyOneofOneofCase.None;
                    localIdentityKeyOneof_ = null;
                }

                private object localIdentityKeyPrivateOneof_;
                /// <summary>Enum of possible cases for the "localIdentityKeyPrivate_oneof" oneof.</summary>
                public enum LocalIdentityKeyPrivateOneofOneofCase
                {
                    None = 0,
                    LocalIdentityKeyPrivate = 8,
                }
                private LocalIdentityKeyPrivateOneofOneofCase localIdentityKeyPrivateOneofCase_ = LocalIdentityKeyPrivateOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public LocalIdentityKeyPrivateOneofOneofCase LocalIdentityKeyPrivateOneofCase
                {
                    get { return localIdentityKeyPrivateOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearLocalIdentityKeyPrivateOneof()
                {
                    localIdentityKeyPrivateOneofCase_ = LocalIdentityKeyPrivateOneofOneofCase.None;
                    localIdentityKeyPrivateOneof_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as PendingKeyExchange);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(PendingKeyExchange other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Sequence != other.Sequence) return false;
                    if (LocalBaseKey != other.LocalBaseKey) return false;
                    if (LocalBaseKeyPrivate != other.LocalBaseKeyPrivate) return false;
                    if (LocalRatchetKey != other.LocalRatchetKey) return false;
                    if (LocalRatchetKeyPrivate != other.LocalRatchetKeyPrivate) return false;
                    if (LocalIdentityKey != other.LocalIdentityKey) return false;
                    if (LocalIdentityKeyPrivate != other.LocalIdentityKeyPrivate) return false;
                    if (SequenceOneofCase != other.SequenceOneofCase) return false;
                    if (LocalBaseKeyOneofCase != other.LocalBaseKeyOneofCase) return false;
                    if (LocalBaseKeyPrivateOneofCase != other.LocalBaseKeyPrivateOneofCase) return false;
                    if (LocalRatchetKeyOneofCase != other.LocalRatchetKeyOneofCase) return false;
                    if (LocalRatchetKeyPrivateOneofCase != other.LocalRatchetKeyPrivateOneofCase) return false;
                    if (LocalIdentityKeyOneofCase != other.LocalIdentityKeyOneofCase) return false;
                    if (LocalIdentityKeyPrivateOneofCase != other.LocalIdentityKeyPrivateOneofCase) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (sequenceOneofCase_ == SequenceOneofOneofCase.Sequence) hash ^= Sequence.GetHashCode();
                    if (localBaseKeyOneofCase_ == LocalBaseKeyOneofOneofCase.LocalBaseKey) hash ^= LocalBaseKey.GetHashCode();
                    if (localBaseKeyPrivateOneofCase_ == LocalBaseKeyPrivateOneofOneofCase.LocalBaseKeyPrivate) hash ^= LocalBaseKeyPrivate.GetHashCode();
                    if (localRatchetKeyOneofCase_ == LocalRatchetKeyOneofOneofCase.LocalRatchetKey) hash ^= LocalRatchetKey.GetHashCode();
                    if (localRatchetKeyPrivateOneofCase_ == LocalRatchetKeyPrivateOneofOneofCase.LocalRatchetKeyPrivate) hash ^= LocalRatchetKeyPrivate.GetHashCode();
                    if (localIdentityKeyOneofCase_ == LocalIdentityKeyOneofOneofCase.LocalIdentityKey) hash ^= LocalIdentityKey.GetHashCode();
                    if (localIdentityKeyPrivateOneofCase_ == LocalIdentityKeyPrivateOneofOneofCase.LocalIdentityKeyPrivate) hash ^= LocalIdentityKeyPrivate.GetHashCode();
                    hash ^= (int)sequenceOneofCase_;
                    hash ^= (int)localBaseKeyOneofCase_;
                    hash ^= (int)localBaseKeyPrivateOneofCase_;
                    hash ^= (int)localRatchetKeyOneofCase_;
                    hash ^= (int)localRatchetKeyPrivateOneofCase_;
                    hash ^= (int)localIdentityKeyOneofCase_;
                    hash ^= (int)localIdentityKeyPrivateOneofCase_;
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (sequenceOneofCase_ == SequenceOneofOneofCase.Sequence)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt32(Sequence);
                    }
                    if (localBaseKeyOneofCase_ == LocalBaseKeyOneofOneofCase.LocalBaseKey)
                    {
                        output.WriteRawTag(18);
                        output.WriteBytes(LocalBaseKey);
                    }
                    if (localBaseKeyPrivateOneofCase_ == LocalBaseKeyPrivateOneofOneofCase.LocalBaseKeyPrivate)
                    {
                        output.WriteRawTag(26);
                        output.WriteBytes(LocalBaseKeyPrivate);
                    }
                    if (localRatchetKeyOneofCase_ == LocalRatchetKeyOneofOneofCase.LocalRatchetKey)
                    {
                        output.WriteRawTag(34);
                        output.WriteBytes(LocalRatchetKey);
                    }
                    if (localRatchetKeyPrivateOneofCase_ == LocalRatchetKeyPrivateOneofOneofCase.LocalRatchetKeyPrivate)
                    {
                        output.WriteRawTag(42);
                        output.WriteBytes(LocalRatchetKeyPrivate);
                    }
                    if (localIdentityKeyOneofCase_ == LocalIdentityKeyOneofOneofCase.LocalIdentityKey)
                    {
                        output.WriteRawTag(58);
                        output.WriteBytes(LocalIdentityKey);
                    }
                    if (localIdentityKeyPrivateOneofCase_ == LocalIdentityKeyPrivateOneofOneofCase.LocalIdentityKeyPrivate)
                    {
                        output.WriteRawTag(66);
                        output.WriteBytes(LocalIdentityKeyPrivate);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (sequenceOneofCase_ == SequenceOneofOneofCase.Sequence)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Sequence);
                    }
                    if (localBaseKeyOneofCase_ == LocalBaseKeyOneofOneofCase.LocalBaseKey)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocalBaseKey);
                    }
                    if (localBaseKeyPrivateOneofCase_ == LocalBaseKeyPrivateOneofOneofCase.LocalBaseKeyPrivate)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocalBaseKeyPrivate);
                    }
                    if (localRatchetKeyOneofCase_ == LocalRatchetKeyOneofOneofCase.LocalRatchetKey)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocalRatchetKey);
                    }
                    if (localRatchetKeyPrivateOneofCase_ == LocalRatchetKeyPrivateOneofOneofCase.LocalRatchetKeyPrivate)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocalRatchetKeyPrivate);
                    }
                    if (localIdentityKeyOneofCase_ == LocalIdentityKeyOneofOneofCase.LocalIdentityKey)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocalIdentityKey);
                    }
                    if (localIdentityKeyPrivateOneofCase_ == LocalIdentityKeyPrivateOneofOneofCase.LocalIdentityKeyPrivate)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LocalIdentityKeyPrivate);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(PendingKeyExchange other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    switch (other.SequenceOneofCase)
                    {
                        case SequenceOneofOneofCase.Sequence:
                            Sequence = other.Sequence;
                            break;
                    }

                    switch (other.LocalBaseKeyOneofCase)
                    {
                        case LocalBaseKeyOneofOneofCase.LocalBaseKey:
                            LocalBaseKey = other.LocalBaseKey;
                            break;
                    }

                    switch (other.LocalBaseKeyPrivateOneofCase)
                    {
                        case LocalBaseKeyPrivateOneofOneofCase.LocalBaseKeyPrivate:
                            LocalBaseKeyPrivate = other.LocalBaseKeyPrivate;
                            break;
                    }

                    switch (other.LocalRatchetKeyOneofCase)
                    {
                        case LocalRatchetKeyOneofOneofCase.LocalRatchetKey:
                            LocalRatchetKey = other.LocalRatchetKey;
                            break;
                    }

                    switch (other.LocalRatchetKeyPrivateOneofCase)
                    {
                        case LocalRatchetKeyPrivateOneofOneofCase.LocalRatchetKeyPrivate:
                            LocalRatchetKeyPrivate = other.LocalRatchetKeyPrivate;
                            break;
                    }

                    switch (other.LocalIdentityKeyOneofCase)
                    {
                        case LocalIdentityKeyOneofOneofCase.LocalIdentityKey:
                            LocalIdentityKey = other.LocalIdentityKey;
                            break;
                    }

                    switch (other.LocalIdentityKeyPrivateOneofCase)
                    {
                        case LocalIdentityKeyPrivateOneofOneofCase.LocalIdentityKeyPrivate:
                            LocalIdentityKeyPrivate = other.LocalIdentityKeyPrivate;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    Sequence = input.ReadUInt32();
                                    break;
                                }
                            case 18:
                                {
                                    LocalBaseKey = input.ReadBytes();
                                    break;
                                }
                            case 26:
                                {
                                    LocalBaseKeyPrivate = input.ReadBytes();
                                    break;
                                }
                            case 34:
                                {
                                    LocalRatchetKey = input.ReadBytes();
                                    break;
                                }
                            case 42:
                                {
                                    LocalRatchetKeyPrivate = input.ReadBytes();
                                    break;
                                }
                            case 58:
                                {
                                    LocalIdentityKey = input.ReadBytes();
                                    break;
                                }
                            case 66:
                                {
                                    LocalIdentityKeyPrivate = input.ReadBytes();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class PendingPreKey : pb::IMessage<PendingPreKey>
            {
                private static readonly pb::MessageParser<PendingPreKey> _parser = new pb::MessageParser<PendingPreKey>(() => new PendingPreKey());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<PendingPreKey> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::libsignal.state.SessionStructure.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PendingPreKey()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PendingPreKey(PendingPreKey other) : this()
                {
                    switch (other.PreKeyIdOneofCase)
                    {
                        case PreKeyIdOneofOneofCase.PreKeyId:
                            PreKeyId = other.PreKeyId;
                            break;
                    }

                    switch (other.SignedPreKeyIdOneofCase)
                    {
                        case SignedPreKeyIdOneofOneofCase.SignedPreKeyId:
                            SignedPreKeyId = other.SignedPreKeyId;
                            break;
                    }

                    switch (other.BaseKeyOneofCase)
                    {
                        case BaseKeyOneofOneofCase.BaseKey:
                            BaseKey = other.BaseKey;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PendingPreKey Clone()
                {
                    return new PendingPreKey(this);
                }

                /// <summary>Field number for the "preKeyId" field.</summary>
                public const int PreKeyIdFieldNumber = 1;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint PreKeyId
                {
                    get { return preKeyIdOneofCase_ == PreKeyIdOneofOneofCase.PreKeyId ? (uint)preKeyIdOneof_ : 0; }
                    set
                    {
                        preKeyIdOneof_ = value;
                        preKeyIdOneofCase_ = PreKeyIdOneofOneofCase.PreKeyId;
                    }
                }

                /// <summary>Field number for the "signedPreKeyId" field.</summary>
                public const int SignedPreKeyIdFieldNumber = 3;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int SignedPreKeyId
                {
                    get { return signedPreKeyIdOneofCase_ == SignedPreKeyIdOneofOneofCase.SignedPreKeyId ? (int)signedPreKeyIdOneof_ : 0; }
                    set
                    {
                        signedPreKeyIdOneof_ = value;
                        signedPreKeyIdOneofCase_ = SignedPreKeyIdOneofOneofCase.SignedPreKeyId;
                    }
                }

                /// <summary>Field number for the "baseKey" field.</summary>
                public const int BaseKeyFieldNumber = 2;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString BaseKey
                {
                    get { return baseKeyOneofCase_ == BaseKeyOneofOneofCase.BaseKey ? (pb::ByteString)baseKeyOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        baseKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        baseKeyOneofCase_ = BaseKeyOneofOneofCase.BaseKey;
                    }
                }

                private object preKeyIdOneof_;
                /// <summary>Enum of possible cases for the "preKeyId_oneof" oneof.</summary>
                public enum PreKeyIdOneofOneofCase
                {
                    None = 0,
                    PreKeyId = 1,
                }
                private PreKeyIdOneofOneofCase preKeyIdOneofCase_ = PreKeyIdOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PreKeyIdOneofOneofCase PreKeyIdOneofCase
                {
                    get { return preKeyIdOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearPreKeyIdOneof()
                {
                    preKeyIdOneofCase_ = PreKeyIdOneofOneofCase.None;
                    preKeyIdOneof_ = null;
                }

                private object signedPreKeyIdOneof_;
                /// <summary>Enum of possible cases for the "signedPreKeyId_oneof" oneof.</summary>
                public enum SignedPreKeyIdOneofOneofCase
                {
                    None = 0,
                    SignedPreKeyId = 3,
                }
                private SignedPreKeyIdOneofOneofCase signedPreKeyIdOneofCase_ = SignedPreKeyIdOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SignedPreKeyIdOneofOneofCase SignedPreKeyIdOneofCase
                {
                    get { return signedPreKeyIdOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearSignedPreKeyIdOneof()
                {
                    signedPreKeyIdOneofCase_ = SignedPreKeyIdOneofOneofCase.None;
                    signedPreKeyIdOneof_ = null;
                }

                private object baseKeyOneof_;
                /// <summary>Enum of possible cases for the "baseKey_oneof" oneof.</summary>
                public enum BaseKeyOneofOneofCase
                {
                    None = 0,
                    BaseKey = 2,
                }
                private BaseKeyOneofOneofCase baseKeyOneofCase_ = BaseKeyOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BaseKeyOneofOneofCase BaseKeyOneofCase
                {
                    get { return baseKeyOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearBaseKeyOneof()
                {
                    baseKeyOneofCase_ = BaseKeyOneofOneofCase.None;
                    baseKeyOneof_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as PendingPreKey);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(PendingPreKey other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (PreKeyId != other.PreKeyId) return false;
                    if (SignedPreKeyId != other.SignedPreKeyId) return false;
                    if (BaseKey != other.BaseKey) return false;
                    if (PreKeyIdOneofCase != other.PreKeyIdOneofCase) return false;
                    if (SignedPreKeyIdOneofCase != other.SignedPreKeyIdOneofCase) return false;
                    if (BaseKeyOneofCase != other.BaseKeyOneofCase) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (preKeyIdOneofCase_ == PreKeyIdOneofOneofCase.PreKeyId) hash ^= PreKeyId.GetHashCode();
                    if (signedPreKeyIdOneofCase_ == SignedPreKeyIdOneofOneofCase.SignedPreKeyId) hash ^= SignedPreKeyId.GetHashCode();
                    if (baseKeyOneofCase_ == BaseKeyOneofOneofCase.BaseKey) hash ^= BaseKey.GetHashCode();
                    hash ^= (int)preKeyIdOneofCase_;
                    hash ^= (int)signedPreKeyIdOneofCase_;
                    hash ^= (int)baseKeyOneofCase_;
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (preKeyIdOneofCase_ == PreKeyIdOneofOneofCase.PreKeyId)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt32(PreKeyId);
                    }
                    if (baseKeyOneofCase_ == BaseKeyOneofOneofCase.BaseKey)
                    {
                        output.WriteRawTag(18);
                        output.WriteBytes(BaseKey);
                    }
                    if (signedPreKeyIdOneofCase_ == SignedPreKeyIdOneofOneofCase.SignedPreKeyId)
                    {
                        output.WriteRawTag(24);
                        output.WriteInt32(SignedPreKeyId);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (preKeyIdOneofCase_ == PreKeyIdOneofOneofCase.PreKeyId)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreKeyId);
                    }
                    if (signedPreKeyIdOneofCase_ == SignedPreKeyIdOneofOneofCase.SignedPreKeyId)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignedPreKeyId);
                    }
                    if (baseKeyOneofCase_ == BaseKeyOneofOneofCase.BaseKey)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BaseKey);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(PendingPreKey other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    switch (other.PreKeyIdOneofCase)
                    {
                        case PreKeyIdOneofOneofCase.PreKeyId:
                            PreKeyId = other.PreKeyId;
                            break;
                    }

                    switch (other.SignedPreKeyIdOneofCase)
                    {
                        case SignedPreKeyIdOneofOneofCase.SignedPreKeyId:
                            SignedPreKeyId = other.SignedPreKeyId;
                            break;
                    }

                    switch (other.BaseKeyOneofCase)
                    {
                        case BaseKeyOneofOneofCase.BaseKey:
                            BaseKey = other.BaseKey;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    PreKeyId = input.ReadUInt32();
                                    break;
                                }
                            case 18:
                                {
                                    BaseKey = input.ReadBytes();
                                    break;
                                }
                            case 24:
                                {
                                    SignedPreKeyId = input.ReadInt32();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class RecordStructure : pb::IMessage<RecordStructure>
    {
        private static readonly pb::MessageParser<RecordStructure> _parser = new pb::MessageParser<RecordStructure>(() => new RecordStructure());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RecordStructure> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::libsignal.state.LocalStorageProtocolReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordStructure()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordStructure(RecordStructure other) : this()
        {
            previousSessions_ = other.previousSessions_.Clone();
            switch (other.SequenceOneofCase)
            {
                case SequenceOneofOneofCase.CurrentSession:
                    CurrentSession = other.CurrentSession.Clone();
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RecordStructure Clone()
        {
            return new RecordStructure(this);
        }

        /// <summary>Field number for the "currentSession" field.</summary>
        public const int CurrentSessionFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignal.state.SessionStructure CurrentSession
        {
            get { return sequenceOneofCase_ == SequenceOneofOneofCase.CurrentSession ? (global::libsignal.state.SessionStructure)sequenceOneof_ : null; }
            set
            {
                sequenceOneof_ = value;
                sequenceOneofCase_ = value == null ? SequenceOneofOneofCase.None : SequenceOneofOneofCase.CurrentSession;
            }
        }

        /// <summary>Field number for the "previousSessions" field.</summary>
        public const int PreviousSessionsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::libsignal.state.SessionStructure> _repeated_previousSessions_codec
            = pb::FieldCodec.ForMessage(18, global::libsignal.state.SessionStructure.Parser);
        private readonly pbc::RepeatedField<global::libsignal.state.SessionStructure> previousSessions_ = new pbc::RepeatedField<global::libsignal.state.SessionStructure>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignal.state.SessionStructure> PreviousSessions
        {
            get { return previousSessions_; }
        }

        private object sequenceOneof_;
        /// <summary>Enum of possible cases for the "sequence_oneof" oneof.</summary>
        public enum SequenceOneofOneofCase
        {
            None = 0,
            CurrentSession = 1,
        }
        private SequenceOneofOneofCase sequenceOneofCase_ = SequenceOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SequenceOneofOneofCase SequenceOneofCase
        {
            get { return sequenceOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSequenceOneof()
        {
            sequenceOneofCase_ = SequenceOneofOneofCase.None;
            sequenceOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as RecordStructure);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RecordStructure other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(CurrentSession, other.CurrentSession)) return false;
            if (!previousSessions_.Equals(other.previousSessions_)) return false;
            if (SequenceOneofCase != other.SequenceOneofCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (sequenceOneofCase_ == SequenceOneofOneofCase.CurrentSession) hash ^= CurrentSession.GetHashCode();
            hash ^= previousSessions_.GetHashCode();
            hash ^= (int)sequenceOneofCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (sequenceOneofCase_ == SequenceOneofOneofCase.CurrentSession)
            {
                output.WriteRawTag(10);
                output.WriteMessage(CurrentSession);
            }
            previousSessions_.WriteTo(output, _repeated_previousSessions_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (sequenceOneofCase_ == SequenceOneofOneofCase.CurrentSession)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentSession);
            }
            size += previousSessions_.CalculateSize(_repeated_previousSessions_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RecordStructure other)
        {
            if (other == null)
            {
                return;
            }
            previousSessions_.Add(other.previousSessions_);
            switch (other.SequenceOneofCase)
            {
                case SequenceOneofOneofCase.CurrentSession:
                    CurrentSession = other.CurrentSession;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            global::libsignal.state.SessionStructure subBuilder = new global::libsignal.state.SessionStructure();
                            if (sequenceOneofCase_ == SequenceOneofOneofCase.CurrentSession)
                            {
                                subBuilder.MergeFrom(CurrentSession);
                            }
                            input.ReadMessage(subBuilder);
                            CurrentSession = subBuilder;
                            break;
                        }
                    case 18:
                        {
                            previousSessions_.AddEntriesFrom(input, _repeated_previousSessions_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class PreKeyRecordStructure : pb::IMessage<PreKeyRecordStructure>
    {
        private static readonly pb::MessageParser<PreKeyRecordStructure> _parser = new pb::MessageParser<PreKeyRecordStructure>(() => new PreKeyRecordStructure());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PreKeyRecordStructure> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::libsignal.state.LocalStorageProtocolReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PreKeyRecordStructure()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PreKeyRecordStructure(PreKeyRecordStructure other) : this()
        {
            switch (other.IdOneofCase)
            {
                case IdOneofOneofCase.Id:
                    Id = other.Id;
                    break;
            }

            switch (other.PublicKeyOneofCase)
            {
                case PublicKeyOneofOneofCase.PublicKey:
                    PublicKey = other.PublicKey;
                    break;
            }

            switch (other.PrivateKeyOneofCase)
            {
                case PrivateKeyOneofOneofCase.PrivateKey:
                    PrivateKey = other.PrivateKey;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PreKeyRecordStructure Clone()
        {
            return new PreKeyRecordStructure(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id
        {
            get { return idOneofCase_ == IdOneofOneofCase.Id ? (uint)idOneof_ : 0; }
            set
            {
                idOneof_ = value;
                idOneofCase_ = IdOneofOneofCase.Id;
            }
        }

        /// <summary>Field number for the "publicKey" field.</summary>
        public const int PublicKeyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PublicKey
        {
            get { return publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey ? (pb::ByteString)publicKeyOneof_ : pb::ByteString.Empty; }
            set
            {
                publicKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                publicKeyOneofCase_ = PublicKeyOneofOneofCase.PublicKey;
            }
        }

        /// <summary>Field number for the "privateKey" field.</summary>
        public const int PrivateKeyFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PrivateKey
        {
            get { return privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey ? (pb::ByteString)privateKeyOneof_ : pb::ByteString.Empty; }
            set
            {
                privateKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                privateKeyOneofCase_ = PrivateKeyOneofOneofCase.PrivateKey;
            }
        }

        private object idOneof_;
        /// <summary>Enum of possible cases for the "id_oneof" oneof.</summary>
        public enum IdOneofOneofCase
        {
            None = 0,
            Id = 1,
        }
        private IdOneofOneofCase idOneofCase_ = IdOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdOneofOneofCase IdOneofCase
        {
            get { return idOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdOneof()
        {
            idOneofCase_ = IdOneofOneofCase.None;
            idOneof_ = null;
        }

        private object publicKeyOneof_;
        /// <summary>Enum of possible cases for the "publicKey_oneof" oneof.</summary>
        public enum PublicKeyOneofOneofCase
        {
            None = 0,
            PublicKey = 2,
        }
        private PublicKeyOneofOneofCase publicKeyOneofCase_ = PublicKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicKeyOneofOneofCase PublicKeyOneofCase
        {
            get { return publicKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPublicKeyOneof()
        {
            publicKeyOneofCase_ = PublicKeyOneofOneofCase.None;
            publicKeyOneof_ = null;
        }

        private object privateKeyOneof_;
        /// <summary>Enum of possible cases for the "privateKey_oneof" oneof.</summary>
        public enum PrivateKeyOneofOneofCase
        {
            None = 0,
            PrivateKey = 3,
        }
        private PrivateKeyOneofOneofCase privateKeyOneofCase_ = PrivateKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PrivateKeyOneofOneofCase PrivateKeyOneofCase
        {
            get { return privateKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPrivateKeyOneof()
        {
            privateKeyOneofCase_ = PrivateKeyOneofOneofCase.None;
            privateKeyOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as PreKeyRecordStructure);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PreKeyRecordStructure other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (PublicKey != other.PublicKey) return false;
            if (PrivateKey != other.PrivateKey) return false;
            if (IdOneofCase != other.IdOneofCase) return false;
            if (PublicKeyOneofCase != other.PublicKeyOneofCase) return false;
            if (PrivateKeyOneofCase != other.PrivateKeyOneofCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (idOneofCase_ == IdOneofOneofCase.Id) hash ^= Id.GetHashCode();
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey) hash ^= PublicKey.GetHashCode();
            if (privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey) hash ^= PrivateKey.GetHashCode();
            hash ^= (int)idOneofCase_;
            hash ^= (int)publicKeyOneofCase_;
            hash ^= (int)privateKeyOneofCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (idOneofCase_ == IdOneofOneofCase.Id)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
            }
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey)
            {
                output.WriteRawTag(18);
                output.WriteBytes(PublicKey);
            }
            if (privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey)
            {
                output.WriteRawTag(26);
                output.WriteBytes(PrivateKey);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (idOneofCase_ == IdOneofOneofCase.Id)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
            }
            if (privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PreKeyRecordStructure other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.IdOneofCase)
            {
                case IdOneofOneofCase.Id:
                    Id = other.Id;
                    break;
            }

            switch (other.PublicKeyOneofCase)
            {
                case PublicKeyOneofOneofCase.PublicKey:
                    PublicKey = other.PublicKey;
                    break;
            }

            switch (other.PrivateKeyOneofCase)
            {
                case PrivateKeyOneofOneofCase.PrivateKey:
                    PrivateKey = other.PrivateKey;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Id = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            PublicKey = input.ReadBytes();
                            break;
                        }
                    case 26:
                        {
                            PrivateKey = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SignedPreKeyRecordStructure : pb::IMessage<SignedPreKeyRecordStructure>
    {
        private static readonly pb::MessageParser<SignedPreKeyRecordStructure> _parser = new pb::MessageParser<SignedPreKeyRecordStructure>(() => new SignedPreKeyRecordStructure());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SignedPreKeyRecordStructure> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::libsignal.state.LocalStorageProtocolReflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignedPreKeyRecordStructure()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignedPreKeyRecordStructure(SignedPreKeyRecordStructure other) : this()
        {
            switch (other.IdOneofCase)
            {
                case IdOneofOneofCase.Id:
                    Id = other.Id;
                    break;
            }

            switch (other.PublicKeyOneofCase)
            {
                case PublicKeyOneofOneofCase.PublicKey:
                    PublicKey = other.PublicKey;
                    break;
            }

            switch (other.PrivateKeyOneofCase)
            {
                case PrivateKeyOneofOneofCase.PrivateKey:
                    PrivateKey = other.PrivateKey;
                    break;
            }

            switch (other.SignatureOneofCase)
            {
                case SignatureOneofOneofCase.Signature:
                    Signature = other.Signature;
                    break;
            }

            switch (other.TimestampOneofCase)
            {
                case TimestampOneofOneofCase.Timestamp:
                    Timestamp = other.Timestamp;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignedPreKeyRecordStructure Clone()
        {
            return new SignedPreKeyRecordStructure(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Id
        {
            get { return idOneofCase_ == IdOneofOneofCase.Id ? (uint)idOneof_ : 0; }
            set
            {
                idOneof_ = value;
                idOneofCase_ = IdOneofOneofCase.Id;
            }
        }

        /// <summary>Field number for the "publicKey" field.</summary>
        public const int PublicKeyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PublicKey
        {
            get { return publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey ? (pb::ByteString)publicKeyOneof_ : pb::ByteString.Empty; }
            set
            {
                publicKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                publicKeyOneofCase_ = PublicKeyOneofOneofCase.PublicKey;
            }
        }

        /// <summary>Field number for the "privateKey" field.</summary>
        public const int PrivateKeyFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PrivateKey
        {
            get { return privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey ? (pb::ByteString)privateKeyOneof_ : pb::ByteString.Empty; }
            set
            {
                privateKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                privateKeyOneofCase_ = PrivateKeyOneofOneofCase.PrivateKey;
            }
        }

        /// <summary>Field number for the "signature" field.</summary>
        public const int SignatureFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Signature
        {
            get { return signatureOneofCase_ == SignatureOneofOneofCase.Signature ? (pb::ByteString)signatureOneof_ : pb::ByteString.Empty; }
            set
            {
                signatureOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                signatureOneofCase_ = SignatureOneofOneofCase.Signature;
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Timestamp
        {
            get { return timestampOneofCase_ == TimestampOneofOneofCase.Timestamp ? (ulong)timestampOneof_ : 0UL; }
            set
            {
                timestampOneof_ = value;
                timestampOneofCase_ = TimestampOneofOneofCase.Timestamp;
            }
        }

        private object idOneof_;
        /// <summary>Enum of possible cases for the "id_oneof" oneof.</summary>
        public enum IdOneofOneofCase
        {
            None = 0,
            Id = 1,
        }
        private IdOneofOneofCase idOneofCase_ = IdOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdOneofOneofCase IdOneofCase
        {
            get { return idOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearIdOneof()
        {
            idOneofCase_ = IdOneofOneofCase.None;
            idOneof_ = null;
        }

        private object publicKeyOneof_;
        /// <summary>Enum of possible cases for the "publicKey_oneof" oneof.</summary>
        public enum PublicKeyOneofOneofCase
        {
            None = 0,
            PublicKey = 2,
        }
        private PublicKeyOneofOneofCase publicKeyOneofCase_ = PublicKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicKeyOneofOneofCase PublicKeyOneofCase
        {
            get { return publicKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPublicKeyOneof()
        {
            publicKeyOneofCase_ = PublicKeyOneofOneofCase.None;
            publicKeyOneof_ = null;
        }

        private object privateKeyOneof_;
        /// <summary>Enum of possible cases for the "privateKey_oneof" oneof.</summary>
        public enum PrivateKeyOneofOneofCase
        {
            None = 0,
            PrivateKey = 3,
        }
        private PrivateKeyOneofOneofCase privateKeyOneofCase_ = PrivateKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PrivateKeyOneofOneofCase PrivateKeyOneofCase
        {
            get { return privateKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPrivateKeyOneof()
        {
            privateKeyOneofCase_ = PrivateKeyOneofOneofCase.None;
            privateKeyOneof_ = null;
        }

        private object signatureOneof_;
        /// <summary>Enum of possible cases for the "signature_oneof" oneof.</summary>
        public enum SignatureOneofOneofCase
        {
            None = 0,
            Signature = 4,
        }
        private SignatureOneofOneofCase signatureOneofCase_ = SignatureOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SignatureOneofOneofCase SignatureOneofCase
        {
            get { return signatureOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSignatureOneof()
        {
            signatureOneofCase_ = SignatureOneofOneofCase.None;
            signatureOneof_ = null;
        }

        private object timestampOneof_;
        /// <summary>Enum of possible cases for the "timestamp_oneof" oneof.</summary>
        public enum TimestampOneofOneofCase
        {
            None = 0,
            Timestamp = 5,
        }
        private TimestampOneofOneofCase timestampOneofCase_ = TimestampOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TimestampOneofOneofCase TimestampOneofCase
        {
            get { return timestampOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTimestampOneof()
        {
            timestampOneofCase_ = TimestampOneofOneofCase.None;
            timestampOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SignedPreKeyRecordStructure);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SignedPreKeyRecordStructure other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (PublicKey != other.PublicKey) return false;
            if (PrivateKey != other.PrivateKey) return false;
            if (Signature != other.Signature) return false;
            if (Timestamp != other.Timestamp) return false;
            if (IdOneofCase != other.IdOneofCase) return false;
            if (PublicKeyOneofCase != other.PublicKeyOneofCase) return false;
            if (PrivateKeyOneofCase != other.PrivateKeyOneofCase) return false;
            if (SignatureOneofCase != other.SignatureOneofCase) return false;
            if (TimestampOneofCase != other.TimestampOneofCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (idOneofCase_ == IdOneofOneofCase.Id) hash ^= Id.GetHashCode();
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey) hash ^= PublicKey.GetHashCode();
            if (privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey) hash ^= PrivateKey.GetHashCode();
            if (signatureOneofCase_ == SignatureOneofOneofCase.Signature) hash ^= Signature.GetHashCode();
            if (timestampOneofCase_ == TimestampOneofOneofCase.Timestamp) hash ^= Timestamp.GetHashCode();
            hash ^= (int)idOneofCase_;
            hash ^= (int)publicKeyOneofCase_;
            hash ^= (int)privateKeyOneofCase_;
            hash ^= (int)signatureOneofCase_;
            hash ^= (int)timestampOneofCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (idOneofCase_ == IdOneofOneofCase.Id)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
            }
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey)
            {
                output.WriteRawTag(18);
                output.WriteBytes(PublicKey);
            }
            if (privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey)
            {
                output.WriteRawTag(26);
                output.WriteBytes(PrivateKey);
            }
            if (signatureOneofCase_ == SignatureOneofOneofCase.Signature)
            {
                output.WriteRawTag(34);
                output.WriteBytes(Signature);
            }
            if (timestampOneofCase_ == TimestampOneofOneofCase.Timestamp)
            {
                output.WriteRawTag(41);
                output.WriteFixed64(Timestamp);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (idOneofCase_ == IdOneofOneofCase.Id)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
            }
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
            }
            if (privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
            }
            if (signatureOneofCase_ == SignatureOneofOneofCase.Signature)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
            }
            if (timestampOneofCase_ == TimestampOneofOneofCase.Timestamp)
            {
                size += 1 + 8;
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SignedPreKeyRecordStructure other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.IdOneofCase)
            {
                case IdOneofOneofCase.Id:
                    Id = other.Id;
                    break;
            }

            switch (other.PublicKeyOneofCase)
            {
                case PublicKeyOneofOneofCase.PublicKey:
                    PublicKey = other.PublicKey;
                    break;
            }

            switch (other.PrivateKeyOneofCase)
            {
                case PrivateKeyOneofOneofCase.PrivateKey:
                    PrivateKey = other.PrivateKey;
                    break;
            }

            switch (other.SignatureOneofCase)
            {
                case SignatureOneofOneofCase.Signature:
                    Signature = other.Signature;
                    break;
            }

            switch (other.TimestampOneofCase)
            {
                case TimestampOneofOneofCase.Timestamp:
                    Timestamp = other.Timestamp;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Id = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            PublicKey = input.ReadBytes();
                            break;
                        }
                    case 26:
                        {
                            PrivateKey = input.ReadBytes();
                            break;
                        }
                    case 34:
                        {
                            Signature = input.ReadBytes();
                            break;
                        }
                    case 41:
                        {
                            Timestamp = input.ReadFixed64();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class IdentityKeyPairStructure : pb::IMessage<IdentityKeyPairStructure>
    {
        private static readonly pb::MessageParser<IdentityKeyPairStructure> _parser = new pb::MessageParser<IdentityKeyPairStructure>(() => new IdentityKeyPairStructure());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<IdentityKeyPairStructure> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::libsignal.state.LocalStorageProtocolReflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentityKeyPairStructure()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentityKeyPairStructure(IdentityKeyPairStructure other) : this()
        {
            switch (other.PublicKeyOneofCase)
            {
                case PublicKeyOneofOneofCase.PublicKey:
                    PublicKey = other.PublicKey;
                    break;
            }

            switch (other.PrivateKeyOneofCase)
            {
                case PrivateKeyOneofOneofCase.PrivateKey:
                    PrivateKey = other.PrivateKey;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public IdentityKeyPairStructure Clone()
        {
            return new IdentityKeyPairStructure(this);
        }

        /// <summary>Field number for the "publicKey" field.</summary>
        public const int PublicKeyFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PublicKey
        {
            get { return publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey ? (pb::ByteString)publicKeyOneof_ : pb::ByteString.Empty; }
            set
            {
                publicKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                publicKeyOneofCase_ = PublicKeyOneofOneofCase.PublicKey;
            }
        }

        /// <summary>Field number for the "privateKey" field.</summary>
        public const int PrivateKeyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString PrivateKey
        {
            get { return privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey ? (pb::ByteString)privateKeyOneof_ : pb::ByteString.Empty; }
            set
            {
                privateKeyOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                privateKeyOneofCase_ = PrivateKeyOneofOneofCase.PrivateKey;
            }
        }

        private object publicKeyOneof_;
        /// <summary>Enum of possible cases for the "publicKey_oneof" oneof.</summary>
        public enum PublicKeyOneofOneofCase
        {
            None = 0,
            PublicKey = 1,
        }
        private PublicKeyOneofOneofCase publicKeyOneofCase_ = PublicKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PublicKeyOneofOneofCase PublicKeyOneofCase
        {
            get { return publicKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPublicKeyOneof()
        {
            publicKeyOneofCase_ = PublicKeyOneofOneofCase.None;
            publicKeyOneof_ = null;
        }

        private object privateKeyOneof_;
        /// <summary>Enum of possible cases for the "privateKey_oneof" oneof.</summary>
        public enum PrivateKeyOneofOneofCase
        {
            None = 0,
            PrivateKey = 2,
        }
        private PrivateKeyOneofOneofCase privateKeyOneofCase_ = PrivateKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PrivateKeyOneofOneofCase PrivateKeyOneofCase
        {
            get { return privateKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPrivateKeyOneof()
        {
            privateKeyOneofCase_ = PrivateKeyOneofOneofCase.None;
            privateKeyOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as IdentityKeyPairStructure);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(IdentityKeyPairStructure other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (PublicKey != other.PublicKey) return false;
            if (PrivateKey != other.PrivateKey) return false;
            if (PublicKeyOneofCase != other.PublicKeyOneofCase) return false;
            if (PrivateKeyOneofCase != other.PrivateKeyOneofCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey) hash ^= PublicKey.GetHashCode();
            if (privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey) hash ^= PrivateKey.GetHashCode();
            hash ^= (int)publicKeyOneofCase_;
            hash ^= (int)privateKeyOneofCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey)
            {
                output.WriteRawTag(10);
                output.WriteBytes(PublicKey);
            }
            if (privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey)
            {
                output.WriteRawTag(18);
                output.WriteBytes(PrivateKey);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (publicKeyOneofCase_ == PublicKeyOneofOneofCase.PublicKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
            }
            if (privateKeyOneofCase_ == PrivateKeyOneofOneofCase.PrivateKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(IdentityKeyPairStructure other)
        {
            if (other == null)
            {
                return;
            }
            switch (other.PublicKeyOneofCase)
            {
                case PublicKeyOneofOneofCase.PublicKey:
                    PublicKey = other.PublicKey;
                    break;
            }

            switch (other.PrivateKeyOneofCase)
            {
                case PrivateKeyOneofOneofCase.PrivateKey:
                    PrivateKey = other.PrivateKey;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            PublicKey = input.ReadBytes();
                            break;
                        }
                    case 18:
                        {
                            PrivateKey = input.ReadBytes();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class SenderKeyStateStructure : pb::IMessage<SenderKeyStateStructure>
    {
        private static readonly pb::MessageParser<SenderKeyStateStructure> _parser = new pb::MessageParser<SenderKeyStateStructure>(() => new SenderKeyStateStructure());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SenderKeyStateStructure> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::libsignal.state.LocalStorageProtocolReflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderKeyStateStructure()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderKeyStateStructure(SenderKeyStateStructure other) : this()
        {
            senderMessageKeys_ = other.senderMessageKeys_.Clone();
            switch (other.SenderKeyIdOneofCase)
            {
                case SenderKeyIdOneofOneofCase.SenderKeyId:
                    SenderKeyId = other.SenderKeyId;
                    break;
            }

            switch (other.SenderChainKeyOneofCase)
            {
                case SenderChainKeyOneofOneofCase.SenderChainKey:
                    SenderChainKey = other.SenderChainKey.Clone();
                    break;
            }

            switch (other.SenderSigningKeyOneofCase)
            {
                case SenderSigningKeyOneofOneofCase.SenderSigningKey:
                    SenderSigningKey = other.SenderSigningKey.Clone();
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderKeyStateStructure Clone()
        {
            return new SenderKeyStateStructure(this);
        }

        /// <summary>Field number for the "senderKeyId" field.</summary>
        public const int SenderKeyIdFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint SenderKeyId
        {
            get { return senderKeyIdOneofCase_ == SenderKeyIdOneofOneofCase.SenderKeyId ? (uint)senderKeyIdOneof_ : 0; }
            set
            {
                senderKeyIdOneof_ = value;
                senderKeyIdOneofCase_ = SenderKeyIdOneofOneofCase.SenderKeyId;
            }
        }

        /// <summary>Field number for the "senderChainKey" field.</summary>
        public const int SenderChainKeyFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignal.state.SenderKeyStateStructure.Types.SenderChainKey SenderChainKey
        {
            get { return senderChainKeyOneofCase_ == SenderChainKeyOneofOneofCase.SenderChainKey ? (global::libsignal.state.SenderKeyStateStructure.Types.SenderChainKey)senderChainKeyOneof_ : null; }
            set
            {
                senderChainKeyOneof_ = value;
                senderChainKeyOneofCase_ = value == null ? SenderChainKeyOneofOneofCase.None : SenderChainKeyOneofOneofCase.SenderChainKey;
            }
        }

        /// <summary>Field number for the "senderSigningKey" field.</summary>
        public const int SenderSigningKeyFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::libsignal.state.SenderKeyStateStructure.Types.SenderSigningKey SenderSigningKey
        {
            get { return senderSigningKeyOneofCase_ == SenderSigningKeyOneofOneofCase.SenderSigningKey ? (global::libsignal.state.SenderKeyStateStructure.Types.SenderSigningKey)senderSigningKeyOneof_ : null; }
            set
            {
                senderSigningKeyOneof_ = value;
                senderSigningKeyOneofCase_ = value == null ? SenderSigningKeyOneofOneofCase.None : SenderSigningKeyOneofOneofCase.SenderSigningKey;
            }
        }

        /// <summary>Field number for the "senderMessageKeys" field.</summary>
        public const int SenderMessageKeysFieldNumber = 4;
        private static readonly pb::FieldCodec<global::libsignal.state.SenderKeyStateStructure.Types.SenderMessageKey> _repeated_senderMessageKeys_codec
            = pb::FieldCodec.ForMessage(34, global::libsignal.state.SenderKeyStateStructure.Types.SenderMessageKey.Parser);
        private readonly pbc::RepeatedField<global::libsignal.state.SenderKeyStateStructure.Types.SenderMessageKey> senderMessageKeys_ = new pbc::RepeatedField<global::libsignal.state.SenderKeyStateStructure.Types.SenderMessageKey>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignal.state.SenderKeyStateStructure.Types.SenderMessageKey> SenderMessageKeys
        {
            get { return senderMessageKeys_; }
        }

        private object senderKeyIdOneof_;
        /// <summary>Enum of possible cases for the "senderKeyId_oneof" oneof.</summary>
        public enum SenderKeyIdOneofOneofCase
        {
            None = 0,
            SenderKeyId = 1,
        }
        private SenderKeyIdOneofOneofCase senderKeyIdOneofCase_ = SenderKeyIdOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderKeyIdOneofOneofCase SenderKeyIdOneofCase
        {
            get { return senderKeyIdOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderKeyIdOneof()
        {
            senderKeyIdOneofCase_ = SenderKeyIdOneofOneofCase.None;
            senderKeyIdOneof_ = null;
        }

        private object senderChainKeyOneof_;
        /// <summary>Enum of possible cases for the "senderChainKey_oneof" oneof.</summary>
        public enum SenderChainKeyOneofOneofCase
        {
            None = 0,
            SenderChainKey = 2,
        }
        private SenderChainKeyOneofOneofCase senderChainKeyOneofCase_ = SenderChainKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderChainKeyOneofOneofCase SenderChainKeyOneofCase
        {
            get { return senderChainKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderChainKeyOneof()
        {
            senderChainKeyOneofCase_ = SenderChainKeyOneofOneofCase.None;
            senderChainKeyOneof_ = null;
        }

        private object senderSigningKeyOneof_;
        /// <summary>Enum of possible cases for the "senderSigningKey_oneof" oneof.</summary>
        public enum SenderSigningKeyOneofOneofCase
        {
            None = 0,
            SenderSigningKey = 3,
        }
        private SenderSigningKeyOneofOneofCase senderSigningKeyOneofCase_ = SenderSigningKeyOneofOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderSigningKeyOneofOneofCase SenderSigningKeyOneofCase
        {
            get { return senderSigningKeyOneofCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearSenderSigningKeyOneof()
        {
            senderSigningKeyOneofCase_ = SenderSigningKeyOneofOneofCase.None;
            senderSigningKeyOneof_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SenderKeyStateStructure);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SenderKeyStateStructure other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (SenderKeyId != other.SenderKeyId) return false;
            if (!object.Equals(SenderChainKey, other.SenderChainKey)) return false;
            if (!object.Equals(SenderSigningKey, other.SenderSigningKey)) return false;
            if (!senderMessageKeys_.Equals(other.senderMessageKeys_)) return false;
            if (SenderKeyIdOneofCase != other.SenderKeyIdOneofCase) return false;
            if (SenderChainKeyOneofCase != other.SenderChainKeyOneofCase) return false;
            if (SenderSigningKeyOneofCase != other.SenderSigningKeyOneofCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (senderKeyIdOneofCase_ == SenderKeyIdOneofOneofCase.SenderKeyId) hash ^= SenderKeyId.GetHashCode();
            if (senderChainKeyOneofCase_ == SenderChainKeyOneofOneofCase.SenderChainKey) hash ^= SenderChainKey.GetHashCode();
            if (senderSigningKeyOneofCase_ == SenderSigningKeyOneofOneofCase.SenderSigningKey) hash ^= SenderSigningKey.GetHashCode();
            hash ^= senderMessageKeys_.GetHashCode();
            hash ^= (int)senderKeyIdOneofCase_;
            hash ^= (int)senderChainKeyOneofCase_;
            hash ^= (int)senderSigningKeyOneofCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (senderKeyIdOneofCase_ == SenderKeyIdOneofOneofCase.SenderKeyId)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(SenderKeyId);
            }
            if (senderChainKeyOneofCase_ == SenderChainKeyOneofOneofCase.SenderChainKey)
            {
                output.WriteRawTag(18);
                output.WriteMessage(SenderChainKey);
            }
            if (senderSigningKeyOneofCase_ == SenderSigningKeyOneofOneofCase.SenderSigningKey)
            {
                output.WriteRawTag(26);
                output.WriteMessage(SenderSigningKey);
            }
            senderMessageKeys_.WriteTo(output, _repeated_senderMessageKeys_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (senderKeyIdOneofCase_ == SenderKeyIdOneofOneofCase.SenderKeyId)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SenderKeyId);
            }
            if (senderChainKeyOneofCase_ == SenderChainKeyOneofOneofCase.SenderChainKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderChainKey);
            }
            if (senderSigningKeyOneofCase_ == SenderSigningKeyOneofOneofCase.SenderSigningKey)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(SenderSigningKey);
            }
            size += senderMessageKeys_.CalculateSize(_repeated_senderMessageKeys_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SenderKeyStateStructure other)
        {
            if (other == null)
            {
                return;
            }
            senderMessageKeys_.Add(other.senderMessageKeys_);
            switch (other.SenderKeyIdOneofCase)
            {
                case SenderKeyIdOneofOneofCase.SenderKeyId:
                    SenderKeyId = other.SenderKeyId;
                    break;
            }

            switch (other.SenderChainKeyOneofCase)
            {
                case SenderChainKeyOneofOneofCase.SenderChainKey:
                    SenderChainKey = other.SenderChainKey;
                    break;
            }

            switch (other.SenderSigningKeyOneofCase)
            {
                case SenderSigningKeyOneofOneofCase.SenderSigningKey:
                    SenderSigningKey = other.SenderSigningKey;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            SenderKeyId = input.ReadUInt32();
                            break;
                        }
                    case 18:
                        {
                            global::libsignal.state.SenderKeyStateStructure.Types.SenderChainKey subBuilder = new global::libsignal.state.SenderKeyStateStructure.Types.SenderChainKey();
                            if (senderChainKeyOneofCase_ == SenderChainKeyOneofOneofCase.SenderChainKey)
                            {
                                subBuilder.MergeFrom(SenderChainKey);
                            }
                            input.ReadMessage(subBuilder);
                            SenderChainKey = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::libsignal.state.SenderKeyStateStructure.Types.SenderSigningKey subBuilder = new global::libsignal.state.SenderKeyStateStructure.Types.SenderSigningKey();
                            if (senderSigningKeyOneofCase_ == SenderSigningKeyOneofOneofCase.SenderSigningKey)
                            {
                                subBuilder.MergeFrom(SenderSigningKey);
                            }
                            input.ReadMessage(subBuilder);
                            SenderSigningKey = subBuilder;
                            break;
                        }
                    case 34:
                        {
                            senderMessageKeys_.AddEntriesFrom(input, _repeated_senderMessageKeys_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the SenderKeyStateStructure message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class SenderChainKey : pb::IMessage<SenderChainKey>
            {
                private static readonly pb::MessageParser<SenderChainKey> _parser = new pb::MessageParser<SenderChainKey>(() => new SenderChainKey());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<SenderChainKey> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::libsignal.state.SenderKeyStateStructure.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderChainKey()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderChainKey(SenderChainKey other) : this()
                {
                    switch (other.IterationOneofCase)
                    {
                        case IterationOneofOneofCase.Iteration:
                            Iteration = other.Iteration;
                            break;
                    }

                    switch (other.SeedOneofCase)
                    {
                        case SeedOneofOneofCase.Seed:
                            Seed = other.Seed;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderChainKey Clone()
                {
                    return new SenderChainKey(this);
                }

                /// <summary>Field number for the "iteration" field.</summary>
                public const int IterationFieldNumber = 1;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint Iteration
                {
                    get { return iterationOneofCase_ == IterationOneofOneofCase.Iteration ? (uint)iterationOneof_ : 0; }
                    set
                    {
                        iterationOneof_ = value;
                        iterationOneofCase_ = IterationOneofOneofCase.Iteration;
                    }
                }

                /// <summary>Field number for the "seed" field.</summary>
                public const int SeedFieldNumber = 2;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString Seed
                {
                    get { return seedOneofCase_ == SeedOneofOneofCase.Seed ? (pb::ByteString)seedOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        seedOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        seedOneofCase_ = SeedOneofOneofCase.Seed;
                    }
                }

                private object iterationOneof_;
                /// <summary>Enum of possible cases for the "iteration_oneof" oneof.</summary>
                public enum IterationOneofOneofCase
                {
                    None = 0,
                    Iteration = 1,
                }
                private IterationOneofOneofCase iterationOneofCase_ = IterationOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public IterationOneofOneofCase IterationOneofCase
                {
                    get { return iterationOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearIterationOneof()
                {
                    iterationOneofCase_ = IterationOneofOneofCase.None;
                    iterationOneof_ = null;
                }

                private object seedOneof_;
                /// <summary>Enum of possible cases for the "seed_oneof" oneof.</summary>
                public enum SeedOneofOneofCase
                {
                    None = 0,
                    Seed = 2,
                }
                private SeedOneofOneofCase seedOneofCase_ = SeedOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SeedOneofOneofCase SeedOneofCase
                {
                    get { return seedOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearSeedOneof()
                {
                    seedOneofCase_ = SeedOneofOneofCase.None;
                    seedOneof_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as SenderChainKey);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(SenderChainKey other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Iteration != other.Iteration) return false;
                    if (Seed != other.Seed) return false;
                    if (IterationOneofCase != other.IterationOneofCase) return false;
                    if (SeedOneofCase != other.SeedOneofCase) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (iterationOneofCase_ == IterationOneofOneofCase.Iteration) hash ^= Iteration.GetHashCode();
                    if (seedOneofCase_ == SeedOneofOneofCase.Seed) hash ^= Seed.GetHashCode();
                    hash ^= (int)iterationOneofCase_;
                    hash ^= (int)seedOneofCase_;
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (iterationOneofCase_ == IterationOneofOneofCase.Iteration)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt32(Iteration);
                    }
                    if (seedOneofCase_ == SeedOneofOneofCase.Seed)
                    {
                        output.WriteRawTag(18);
                        output.WriteBytes(Seed);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (iterationOneofCase_ == IterationOneofOneofCase.Iteration)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Iteration);
                    }
                    if (seedOneofCase_ == SeedOneofOneofCase.Seed)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Seed);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(SenderChainKey other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    switch (other.IterationOneofCase)
                    {
                        case IterationOneofOneofCase.Iteration:
                            Iteration = other.Iteration;
                            break;
                    }

                    switch (other.SeedOneofCase)
                    {
                        case SeedOneofOneofCase.Seed:
                            Seed = other.Seed;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    Iteration = input.ReadUInt32();
                                    break;
                                }
                            case 18:
                                {
                                    Seed = input.ReadBytes();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class SenderMessageKey : pb::IMessage<SenderMessageKey>
            {
                private static readonly pb::MessageParser<SenderMessageKey> _parser = new pb::MessageParser<SenderMessageKey>(() => new SenderMessageKey());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<SenderMessageKey> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::libsignal.state.SenderKeyStateStructure.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderMessageKey()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderMessageKey(SenderMessageKey other) : this()
                {
                    switch (other.IterationOneofCase)
                    {
                        case IterationOneofOneofCase.Iteration:
                            Iteration = other.Iteration;
                            break;
                    }

                    switch (other.SeedOneofCase)
                    {
                        case SeedOneofOneofCase.Seed:
                            Seed = other.Seed;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderMessageKey Clone()
                {
                    return new SenderMessageKey(this);
                }

                /// <summary>Field number for the "iteration" field.</summary>
                public const int IterationFieldNumber = 1;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint Iteration
                {
                    get { return iterationOneofCase_ == IterationOneofOneofCase.Iteration ? (uint)iterationOneof_ : 0; }
                    set
                    {
                        iterationOneof_ = value;
                        iterationOneofCase_ = IterationOneofOneofCase.Iteration;
                    }
                }

                /// <summary>Field number for the "seed" field.</summary>
                public const int SeedFieldNumber = 2;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString Seed
                {
                    get { return seedOneofCase_ == SeedOneofOneofCase.Seed ? (pb::ByteString)seedOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        seedOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        seedOneofCase_ = SeedOneofOneofCase.Seed;
                    }
                }

                private object iterationOneof_;
                /// <summary>Enum of possible cases for the "iteration_oneof" oneof.</summary>
                public enum IterationOneofOneofCase
                {
                    None = 0,
                    Iteration = 1,
                }
                private IterationOneofOneofCase iterationOneofCase_ = IterationOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public IterationOneofOneofCase IterationOneofCase
                {
                    get { return iterationOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearIterationOneof()
                {
                    iterationOneofCase_ = IterationOneofOneofCase.None;
                    iterationOneof_ = null;
                }

                private object seedOneof_;
                /// <summary>Enum of possible cases for the "seed_oneof" oneof.</summary>
                public enum SeedOneofOneofCase
                {
                    None = 0,
                    Seed = 2,
                }
                private SeedOneofOneofCase seedOneofCase_ = SeedOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SeedOneofOneofCase SeedOneofCase
                {
                    get { return seedOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearSeedOneof()
                {
                    seedOneofCase_ = SeedOneofOneofCase.None;
                    seedOneof_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as SenderMessageKey);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(SenderMessageKey other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Iteration != other.Iteration) return false;
                    if (Seed != other.Seed) return false;
                    if (IterationOneofCase != other.IterationOneofCase) return false;
                    if (SeedOneofCase != other.SeedOneofCase) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (iterationOneofCase_ == IterationOneofOneofCase.Iteration) hash ^= Iteration.GetHashCode();
                    if (seedOneofCase_ == SeedOneofOneofCase.Seed) hash ^= Seed.GetHashCode();
                    hash ^= (int)iterationOneofCase_;
                    hash ^= (int)seedOneofCase_;
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (iterationOneofCase_ == IterationOneofOneofCase.Iteration)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt32(Iteration);
                    }
                    if (seedOneofCase_ == SeedOneofOneofCase.Seed)
                    {
                        output.WriteRawTag(18);
                        output.WriteBytes(Seed);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (iterationOneofCase_ == IterationOneofOneofCase.Iteration)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Iteration);
                    }
                    if (seedOneofCase_ == SeedOneofOneofCase.Seed)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Seed);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(SenderMessageKey other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    switch (other.IterationOneofCase)
                    {
                        case IterationOneofOneofCase.Iteration:
                            Iteration = other.Iteration;
                            break;
                    }

                    switch (other.SeedOneofCase)
                    {
                        case SeedOneofOneofCase.Seed:
                            Seed = other.Seed;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    Iteration = input.ReadUInt32();
                                    break;
                                }
                            case 18:
                                {
                                    Seed = input.ReadBytes();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class SenderSigningKey : pb::IMessage<SenderSigningKey>
            {
                private static readonly pb::MessageParser<SenderSigningKey> _parser = new pb::MessageParser<SenderSigningKey>(() => new SenderSigningKey());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<SenderSigningKey> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::libsignal.state.SenderKeyStateStructure.Descriptor.NestedTypes[2]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderSigningKey()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderSigningKey(SenderSigningKey other) : this()
                {
                    switch (other.PublicOneofCase)
                    {
                        case PublicOneofOneofCase.Public:
                            Public = other.Public;
                            break;
                    }

                    switch (other.PrivateOneofCase)
                    {
                        case PrivateOneofOneofCase.Private:
                            Private = other.Private;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public SenderSigningKey Clone()
                {
                    return new SenderSigningKey(this);
                }

                /// <summary>Field number for the "public" field.</summary>
                public const int PublicFieldNumber = 1;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString Public
                {
                    get { return publicOneofCase_ == PublicOneofOneofCase.Public ? (pb::ByteString)publicOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        publicOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        publicOneofCase_ = PublicOneofOneofCase.Public;
                    }
                }

                /// <summary>Field number for the "private" field.</summary>
                public const int PrivateFieldNumber = 2;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public pb::ByteString Private
                {
                    get { return privateOneofCase_ == PrivateOneofOneofCase.Private ? (pb::ByteString)privateOneof_ : pb::ByteString.Empty; }
                    set
                    {
                        privateOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        privateOneofCase_ = PrivateOneofOneofCase.Private;
                    }
                }

                private object publicOneof_;
                /// <summary>Enum of possible cases for the "public_oneof" oneof.</summary>
                public enum PublicOneofOneofCase
                {
                    None = 0,
                    Public = 1,
                }
                private PublicOneofOneofCase publicOneofCase_ = PublicOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PublicOneofOneofCase PublicOneofCase
                {
                    get { return publicOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearPublicOneof()
                {
                    publicOneofCase_ = PublicOneofOneofCase.None;
                    publicOneof_ = null;
                }

                private object privateOneof_;
                /// <summary>Enum of possible cases for the "private_oneof" oneof.</summary>
                public enum PrivateOneofOneofCase
                {
                    None = 0,
                    Private = 2,
                }
                private PrivateOneofOneofCase privateOneofCase_ = PrivateOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public PrivateOneofOneofCase PrivateOneofCase
                {
                    get { return privateOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearPrivateOneof()
                {
                    privateOneofCase_ = PrivateOneofOneofCase.None;
                    privateOneof_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as SenderSigningKey);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(SenderSigningKey other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Public != other.Public) return false;
                    if (Private != other.Private) return false;
                    if (PublicOneofCase != other.PublicOneofCase) return false;
                    if (PrivateOneofCase != other.PrivateOneofCase) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (publicOneofCase_ == PublicOneofOneofCase.Public) hash ^= Public.GetHashCode();
                    if (privateOneofCase_ == PrivateOneofOneofCase.Private) hash ^= Private.GetHashCode();
                    hash ^= (int)publicOneofCase_;
                    hash ^= (int)privateOneofCase_;
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (publicOneofCase_ == PublicOneofOneofCase.Public)
                    {
                        output.WriteRawTag(10);
                        output.WriteBytes(Public);
                    }
                    if (privateOneofCase_ == PrivateOneofOneofCase.Private)
                    {
                        output.WriteRawTag(18);
                        output.WriteBytes(Private);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (publicOneofCase_ == PublicOneofOneofCase.Public)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Public);
                    }
                    if (privateOneofCase_ == PrivateOneofOneofCase.Private)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Private);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(SenderSigningKey other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    switch (other.PublicOneofCase)
                    {
                        case PublicOneofOneofCase.Public:
                            Public = other.Public;
                            break;
                    }

                    switch (other.PrivateOneofCase)
                    {
                        case PrivateOneofOneofCase.Private:
                            Private = other.Private;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Public = input.ReadBytes();
                                    break;
                                }
                            case 18:
                                {
                                    Private = input.ReadBytes();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    public sealed partial class SenderKeyRecordStructure : pb::IMessage<SenderKeyRecordStructure>
    {
        private static readonly pb::MessageParser<SenderKeyRecordStructure> _parser = new pb::MessageParser<SenderKeyRecordStructure>(() => new SenderKeyRecordStructure());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SenderKeyRecordStructure> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::libsignal.state.LocalStorageProtocolReflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderKeyRecordStructure()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderKeyRecordStructure(SenderKeyRecordStructure other) : this()
        {
            senderKeyStates_ = other.senderKeyStates_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SenderKeyRecordStructure Clone()
        {
            return new SenderKeyRecordStructure(this);
        }

        /// <summary>Field number for the "senderKeyStates" field.</summary>
        public const int SenderKeyStatesFieldNumber = 1;
        private static readonly pb::FieldCodec<global::libsignal.state.SenderKeyStateStructure> _repeated_senderKeyStates_codec
            = pb::FieldCodec.ForMessage(10, global::libsignal.state.SenderKeyStateStructure.Parser);
        private readonly pbc::RepeatedField<global::libsignal.state.SenderKeyStateStructure> senderKeyStates_ = new pbc::RepeatedField<global::libsignal.state.SenderKeyStateStructure>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::libsignal.state.SenderKeyStateStructure> SenderKeyStates
        {
            get { return senderKeyStates_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as SenderKeyRecordStructure);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SenderKeyRecordStructure other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!senderKeyStates_.Equals(other.senderKeyStates_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= senderKeyStates_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            senderKeyStates_.WriteTo(output, _repeated_senderKeyStates_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            size += senderKeyStates_.CalculateSize(_repeated_senderKeyStates_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SenderKeyRecordStructure other)
        {
            if (other == null)
            {
                return;
            }
            senderKeyStates_.Add(other.senderKeyStates_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            senderKeyStates_.AddEntriesFrom(input, _repeated_senderKeyStates_codec);
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
